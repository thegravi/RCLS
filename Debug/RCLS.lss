
RCLS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000045a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a2  00800060  0000045a  000004ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000012b4  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001583  00000000  00000000  00001824  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	11 e0       	ldi	r17, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e5       	ldi	r30, 0x5A	; 90
  3a:	f4 e0       	ldi	r31, 0x04	; 4
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a2 30       	cpi	r26, 0x02	; 2
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	f6 d1       	rcall	.+1004   	; 0x436 <main>
  4a:	05 c2       	rjmp	.+1034   	; 0x456 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <LCD_SendCommand>:
  4e:	1f 93       	push	r17
  50:	16 2f       	mov	r17, r22
  52:	84 30       	cpi	r24, 0x04	; 4
  54:	99 f0       	breq	.+38     	; 0x7c <LCD_SendCommand+0x2e>
  56:	88 30       	cpi	r24, 0x08	; 8
  58:	e9 f4       	brne	.+58     	; 0x94 <LCD_SendCommand+0x46>
  5a:	80 e4       	ldi	r24, 0x40	; 64
  5c:	9f e1       	ldi	r25, 0x1F	; 31
  5e:	01 97       	sbiw	r24, 0x01	; 1
  60:	f1 f7       	brne	.-4      	; 0x5e <LCD_SendCommand+0x10>
  62:	e0 91 9d 00 	lds	r30, 0x009D
  66:	f0 91 9e 00 	lds	r31, 0x009E
  6a:	86 2f       	mov	r24, r22
  6c:	82 95       	swap	r24
  6e:	8f 70       	andi	r24, 0x0F	; 15
  70:	09 95       	icall
  72:	e0 91 9f 00 	lds	r30, 0x009F
  76:	f0 91 a0 00 	lds	r31, 0x00A0
  7a:	09 95       	icall
  7c:	e0 91 9d 00 	lds	r30, 0x009D
  80:	f0 91 9e 00 	lds	r31, 0x009E
  84:	81 2f       	mov	r24, r17
  86:	8f 70       	andi	r24, 0x0F	; 15
  88:	09 95       	icall
  8a:	e0 91 9f 00 	lds	r30, 0x009F
  8e:	f0 91 a0 00 	lds	r31, 0x00A0
  92:	09 95       	icall
  94:	1f 91       	pop	r17
  96:	08 95       	ret

00000098 <LCD_ExecuteCMD>:
	}
}

void LCD_ExecuteCMD() {

	LCD_Interface.Regs.PORT_E_set();
  98:	e0 91 89 00 	lds	r30, 0x0089
  9c:	f0 91 8a 00 	lds	r31, 0x008A
  a0:	09 95       	icall
	asm volatile("nop");
  a2:	00 00       	nop
	asm volatile("nop");
  a4:	00 00       	nop
	LCD_Interface.Regs.PORT_E_clear();
  a6:	e0 91 8f 00 	lds	r30, 0x008F
  aa:	f0 91 90 00 	lds	r31, 0x0090
  ae:	09 95       	icall
}
  b0:	08 95       	ret

000000b2 <LCD_WaitIfBusy>:

void LCD_WaitIfBusy() {
  b2:	1f 93       	push	r17
  b4:	df 93       	push	r29
  b6:	cf 93       	push	r28
  b8:	0f 92       	push	r0
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62

	volatile uint8_t data;
	uint8_t busy_f = 1;

	LCD_Interface.Regs.PORT_RW_set();
  be:	e0 91 8d 00 	lds	r30, 0x008D
  c2:	f0 91 8e 00 	lds	r31, 0x008E
  c6:	09 95       	icall
	DATA_DIR &= ~(1<<LCD_DATA0) | ~(1<<LCD_DATA1) | ~(1<<LCD_DATA2) | ~(1<<LCD_DATA3);
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  cc:	15 e0       	ldi	r17, 0x05	; 5

	while (busy_f) {

		LCD_Interface.Regs.PORT_E_set();
  ce:	e0 91 89 00 	lds	r30, 0x0089
  d2:	f0 91 8a 00 	lds	r31, 0x008A
  d6:	09 95       	icall
  d8:	81 2f       	mov	r24, r17
  da:	8a 95       	dec	r24
  dc:	f1 f7       	brne	.-4      	; 0xda <LCD_WaitIfBusy+0x28>
		_delay_us(1);
		data = DATA_PIN  << 4;
  de:	80 b3       	in	r24, 0x10	; 16
  e0:	82 95       	swap	r24
  e2:	80 7f       	andi	r24, 0xF0	; 240
  e4:	89 83       	std	Y+1, r24	; 0x01
		LCD_Interface.Regs.PORT_E_clear();
  e6:	e0 91 8f 00 	lds	r30, 0x008F
  ea:	f0 91 90 00 	lds	r31, 0x0090
  ee:	09 95       	icall
  f0:	81 2f       	mov	r24, r17
  f2:	8a 95       	dec	r24
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LCD_WaitIfBusy+0x40>
		_delay_us(1);
		LCD_Interface.Regs.PORT_E_set();
  f6:	e0 91 89 00 	lds	r30, 0x0089
  fa:	f0 91 8a 00 	lds	r31, 0x008A
  fe:	09 95       	icall
 100:	81 2f       	mov	r24, r17
 102:	8a 95       	dec	r24
 104:	f1 f7       	brne	.-4      	; 0x102 <LCD_WaitIfBusy+0x50>
		_delay_us(1);
		data |= (DATA_PIN & 0x0F);
 106:	99 81       	ldd	r25, Y+1	; 0x01
 108:	80 b3       	in	r24, 0x10	; 16
 10a:	8f 70       	andi	r24, 0x0F	; 15
 10c:	89 2b       	or	r24, r25
 10e:	89 83       	std	Y+1, r24	; 0x01
		LCD_Interface.Regs.PORT_E_clear();
 110:	e0 91 8f 00 	lds	r30, 0x008F
 114:	f0 91 90 00 	lds	r31, 0x0090
 118:	09 95       	icall
 11a:	81 2f       	mov	r24, r17
 11c:	8a 95       	dec	r24
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_WaitIfBusy+0x6a>
		_delay_us(1);

		if (data & 0x80) { } else { busy_f = 0; }
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	87 fd       	sbrc	r24, 7
 124:	d4 cf       	rjmp	.-88     	; 0xce <LCD_WaitIfBusy+0x1c>
	}
	DATA_DIR |= (1<<LCD_DATA0) | (1<<LCD_DATA1) | (1<<LCD_DATA2) | (1<<LCD_DATA3);
 126:	81 b3       	in	r24, 0x11	; 17
 128:	8f 60       	ori	r24, 0x0F	; 15
 12a:	81 bb       	out	0x11, r24	; 17
	LCD_Interface.Regs.PORT_RW_clear();
 12c:	e0 91 93 00 	lds	r30, 0x0093
 130:	f0 91 94 00 	lds	r31, 0x0094
 134:	09 95       	icall
}
 136:	0f 90       	pop	r0
 138:	cf 91       	pop	r28
 13a:	df 91       	pop	r29
 13c:	1f 91       	pop	r17
 13e:	08 95       	ret

00000140 <LCD_SendCharacter>:

void LCD_SendCharacter(uint8_t character) {
 140:	1f 93       	push	r17
 142:	18 2f       	mov	r17, r24
 144:	80 ea       	ldi	r24, 0xA0	; 160
 146:	8a 95       	dec	r24
 148:	f1 f7       	brne	.-4      	; 0x146 <LCD_SendCharacter+0x6>

	_delay_us(30);
	//LCD_Interface.Comm.WaitIfBusy();
	LCD_Interface.Regs.PORT_RS_set();
 14a:	e0 91 8b 00 	lds	r30, 0x008B
 14e:	f0 91 8c 00 	lds	r31, 0x008C
 152:	09 95       	icall
	LCD_Interface.DataFlow.SendCommand(8, character);
 154:	e0 91 95 00 	lds	r30, 0x0095
 158:	f0 91 96 00 	lds	r31, 0x0096
 15c:	88 e0       	ldi	r24, 0x08	; 8
 15e:	61 2f       	mov	r22, r17
 160:	09 95       	icall
	LCD_Interface.Regs.PORT_RS_clear();
 162:	e0 91 91 00 	lds	r30, 0x0091
 166:	f0 91 92 00 	lds	r31, 0x0092
 16a:	09 95       	icall
}
 16c:	1f 91       	pop	r17
 16e:	08 95       	ret

00000170 <LCD_SendString>:

void LCD_SendString(char* charString) {
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	ec 01       	movw	r28, r24
 176:	06 c0       	rjmp	.+12     	; 0x184 <LCD_SendString+0x14>

	while(*charString != '\0') {
		LCD_Interface.DataFlow.SendCharacter(*charString++);
 178:	21 96       	adiw	r28, 0x01	; 1
 17a:	e0 91 97 00 	lds	r30, 0x0097
 17e:	f0 91 98 00 	lds	r31, 0x0098
 182:	09 95       	icall
	LCD_Interface.Regs.PORT_RS_clear();
}

void LCD_SendString(char* charString) {

	while(*charString != '\0') {
 184:	88 81       	ld	r24, Y
 186:	88 23       	and	r24, r24
 188:	b9 f7       	brne	.-18     	; 0x178 <LCD_SendString+0x8>
		LCD_Interface.DataFlow.SendCharacter(*charString++);
	}
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <LCD_SendNumber>:

void LCD_SendNumber(uint16_t number) {

}
 190:	08 95       	ret

00000192 <LCD_ProcessData>:

void LCD_ProcessData(int8_t data) {

	if (data & 0x01) {
 192:	99 27       	eor	r25, r25
 194:	87 fd       	sbrc	r24, 7
 196:	90 95       	com	r25
 198:	80 ff       	sbrs	r24, 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <LCD_ProcessData+0xe>
		DATA_PORT |=  (1<<LCD_DATA0);
 19c:	90 9a       	sbi	0x12, 0	; 18
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <LCD_ProcessData+0x10>
	} else { DATA_PORT &= ~(1<<LCD_DATA0); }
 1a0:	90 98       	cbi	0x12, 0	; 18

	if (data & 0x02) {
 1a2:	81 ff       	sbrs	r24, 1
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <LCD_ProcessData+0x18>
		DATA_PORT |=  (1<<LCD_DATA1);
 1a6:	91 9a       	sbi	0x12, 1	; 18
 1a8:	01 c0       	rjmp	.+2      	; 0x1ac <LCD_ProcessData+0x1a>
	} else { DATA_PORT &= ~(1<<LCD_DATA1); }
 1aa:	91 98       	cbi	0x12, 1	; 18

	if (data & 0x04) {
 1ac:	82 ff       	sbrs	r24, 2
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <LCD_ProcessData+0x22>
		DATA_PORT |=  (1<<LCD_DATA2);
 1b0:	92 9a       	sbi	0x12, 2	; 18
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <LCD_ProcessData+0x24>
	} else { DATA_PORT &= ~(1<<LCD_DATA2); }
 1b4:	92 98       	cbi	0x12, 2	; 18

	if (data & 0x08) {
 1b6:	83 ff       	sbrs	r24, 3
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <LCD_ProcessData+0x2c>
		DATA_PORT |=  (1<<LCD_DATA3);
 1ba:	93 9a       	sbi	0x12, 3	; 18
 1bc:	08 95       	ret
	} else { DATA_PORT &= ~(1<<LCD_DATA3); }
 1be:	93 98       	cbi	0x12, 3	; 18
 1c0:	08 95       	ret

000001c2 <LCD_Initialize>:
}

void LCD_Initialize() {
 1c2:	0f 93       	push	r16
 1c4:	1f 93       	push	r17

	DATA_DIR |= (1<<LCD_DATA0) | (1<<LCD_DATA1) | (1<<LCD_DATA2) | (1<<LCD_DATA3);
 1c6:	81 b3       	in	r24, 0x11	; 17
 1c8:	8f 60       	ori	r24, 0x0F	; 15
 1ca:	81 bb       	out	0x11, r24	; 17
	LCD_Interface.Regs.DDR_E_set();
 1cc:	e0 91 7d 00 	lds	r30, 0x007D
 1d0:	f0 91 7e 00 	lds	r31, 0x007E
 1d4:	09 95       	icall
	LCD_Interface.Regs.DDR_RS_set();
 1d6:	e0 91 7f 00 	lds	r30, 0x007F
 1da:	f0 91 80 00 	lds	r31, 0x0080
 1de:	09 95       	icall
	LCD_Interface.Regs.DDR_RW_set();
 1e0:	e0 91 81 00 	lds	r30, 0x0081
 1e4:	f0 91 82 00 	lds	r31, 0x0082
 1e8:	09 95       	icall
	LCD_Interface.Regs.PORT_E_clear();
 1ea:	e0 91 8f 00 	lds	r30, 0x008F
 1ee:	f0 91 90 00 	lds	r31, 0x0090
 1f2:	09 95       	icall
	LCD_Interface.Regs.PORT_RS_clear();
 1f4:	e0 91 91 00 	lds	r30, 0x0091
 1f8:	f0 91 92 00 	lds	r31, 0x0092
 1fc:	09 95       	icall
	LCD_Interface.Regs.PORT_RW_clear();
 1fe:	e0 91 93 00 	lds	r30, 0x0093
 202:	f0 91 94 00 	lds	r31, 0x0094
 206:	09 95       	icall
 208:	88 ec       	ldi	r24, 0xC8	; 200
 20a:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 20c:	20 e9       	ldi	r18, 0x90	; 144
 20e:	31 e0       	ldi	r19, 0x01	; 1
 210:	f9 01       	movw	r30, r18
 212:	31 97       	sbiw	r30, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <LCD_Initialize+0x50>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 216:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 218:	d9 f7       	brne	.-10     	; 0x210 <LCD_Initialize+0x4e>

	_delay_ms(20);
	LCD_Interface.DataFlow.SendCommand(4, 0x03);	_delay_ms(5);
 21a:	e0 91 95 00 	lds	r30, 0x0095
 21e:	f0 91 96 00 	lds	r31, 0x0096
 222:	84 e0       	ldi	r24, 0x04	; 4
 224:	63 e0       	ldi	r22, 0x03	; 3
 226:	09 95       	icall
 228:	80 e2       	ldi	r24, 0x20	; 32
 22a:	9e e4       	ldi	r25, 0x4E	; 78
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <LCD_Initialize+0x6a>
	LCD_Interface.DataFlow.SendCommand(4, 0x03);	_delay_ms(2);
 230:	e0 91 95 00 	lds	r30, 0x0095
 234:	f0 91 96 00 	lds	r31, 0x0096
 238:	84 e0       	ldi	r24, 0x04	; 4
 23a:	63 e0       	ldi	r22, 0x03	; 3
 23c:	09 95       	icall
 23e:	00 e4       	ldi	r16, 0x40	; 64
 240:	1f e1       	ldi	r17, 0x1F	; 31
 242:	c8 01       	movw	r24, r16
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <LCD_Initialize+0x82>
	LCD_Interface.DataFlow.SendCommand(4, 0x03);	_delay_ms(2);
 248:	e0 91 95 00 	lds	r30, 0x0095
 24c:	f0 91 96 00 	lds	r31, 0x0096
 250:	84 e0       	ldi	r24, 0x04	; 4
 252:	63 e0       	ldi	r22, 0x03	; 3
 254:	09 95       	icall
 256:	c8 01       	movw	r24, r16
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <LCD_Initialize+0x96>
	LCD_Interface.DataFlow.SendCommand(4, 0x02);	_delay_ms(2);
 25c:	e0 91 95 00 	lds	r30, 0x0095
 260:	f0 91 96 00 	lds	r31, 0x0096
 264:	84 e0       	ldi	r24, 0x04	; 4
 266:	62 e0       	ldi	r22, 0x02	; 2
 268:	09 95       	icall
 26a:	c8 01       	movw	r24, r16
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <LCD_Initialize+0xaa>
	// 4-bit mode, 2 lines
	LCD_Interface.DataFlow.SendCommand(4, 0x2); 	_delay_ms(2);
 270:	e0 91 95 00 	lds	r30, 0x0095
 274:	f0 91 96 00 	lds	r31, 0x0096
 278:	84 e0       	ldi	r24, 0x04	; 4
 27a:	62 e0       	ldi	r22, 0x02	; 2
 27c:	09 95       	icall
 27e:	c8 01       	movw	r24, r16
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <LCD_Initialize+0xbe>
	LCD_Interface.DataFlow.SendCommand(4, 0x8); 	_delay_ms(2);
 284:	e0 91 95 00 	lds	r30, 0x0095
 288:	f0 91 96 00 	lds	r31, 0x0096
 28c:	84 e0       	ldi	r24, 0x04	; 4
 28e:	68 e0       	ldi	r22, 0x08	; 8
 290:	09 95       	icall
 292:	c8 01       	movw	r24, r16
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <LCD_Initialize+0xd2>

	// display on
	LCD_Interface.DataFlow.SendCommand(8, 0x0C);
 298:	e0 91 95 00 	lds	r30, 0x0095
 29c:	f0 91 96 00 	lds	r31, 0x0096
 2a0:	88 e0       	ldi	r24, 0x08	; 8
 2a2:	6c e0       	ldi	r22, 0x0C	; 12
 2a4:	09 95       	icall
	//LCD_Interface.Comm.WaitIfBusy();

	// clear display, return position
	LCD_Interface.DataFlow.SendCommand(8, 0x01);
 2a6:	e0 91 95 00 	lds	r30, 0x0095
 2aa:	f0 91 96 00 	lds	r31, 0x0096
 2ae:	88 e0       	ldi	r24, 0x08	; 8
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	09 95       	icall
	//LCD_Interface.Comm.WaitIfBusy();
	LCD_Interface.DataFlow.SendString("Initialization");_delay_ms(500);
 2b4:	e0 91 99 00 	lds	r30, 0x0099
 2b8:	f0 91 9a 00 	lds	r31, 0x009A
 2bc:	80 e6       	ldi	r24, 0x60	; 96
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	09 95       	icall
 2c2:	88 e8       	ldi	r24, 0x88	; 136
 2c4:	93 e1       	ldi	r25, 0x13	; 19
 2c6:	20 e9       	ldi	r18, 0x90	; 144
 2c8:	31 e0       	ldi	r19, 0x01	; 1
 2ca:	f9 01       	movw	r30, r18
 2cc:	31 97       	sbiw	r30, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCD_Initialize+0x10a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2d2:	d9 f7       	brne	.-10     	; 0x2ca <LCD_Initialize+0x108>
	//LCD_Interface.Comm.WaitIfBusy();
	LCD_Interface.Position(2, 1);
 2d4:	e0 91 7b 00 	lds	r30, 0x007B
 2d8:	f0 91 7c 00 	lds	r31, 0x007C
 2dc:	82 e0       	ldi	r24, 0x02	; 2
 2de:	61 e0       	ldi	r22, 0x01	; 1
 2e0:	09 95       	icall
	//LCD_Interface.Comm.WaitIfBusy();
	LCD_Interface.DataFlow.SendString("COMPLETED");	_delay_ms(1000);
 2e2:	e0 91 99 00 	lds	r30, 0x0099
 2e6:	f0 91 9a 00 	lds	r31, 0x009A
 2ea:	8f e6       	ldi	r24, 0x6F	; 111
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	09 95       	icall
 2f0:	80 e1       	ldi	r24, 0x10	; 16
 2f2:	97 e2       	ldi	r25, 0x27	; 39
 2f4:	20 e9       	ldi	r18, 0x90	; 144
 2f6:	31 e0       	ldi	r19, 0x01	; 1
 2f8:	f9 01       	movw	r30, r18
 2fa:	31 97       	sbiw	r30, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <LCD_Initialize+0x138>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 300:	d9 f7       	brne	.-10     	; 0x2f8 <LCD_Initialize+0x136>
	LCD_Interface.DataFlow.SendCommand(8, 0x01);
 302:	e0 91 95 00 	lds	r30, 0x0095
 306:	f0 91 96 00 	lds	r31, 0x0096
 30a:	88 e0       	ldi	r24, 0x08	; 8
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	09 95       	icall
	LCD_Interface.Position(1, 1);
 310:	e0 91 7b 00 	lds	r30, 0x007B
 314:	f0 91 7c 00 	lds	r31, 0x007C
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	61 e0       	ldi	r22, 0x01	; 1
 31c:	09 95       	icall
}
 31e:	1f 91       	pop	r17
 320:	0f 91       	pop	r16
 322:	08 95       	ret

00000324 <LCD_Position>:

void LCD_Position(uint8_t pos_y, uint8_t pos_x) {
 324:	df 93       	push	r29
 326:	cf 93       	push	r28
 328:	00 d0       	rcall	.+0      	; 0x32a <LCD_Position+0x6>
 32a:	00 d0       	rcall	.+0      	; 0x32c <LCD_Position+0x8>
 32c:	cd b7       	in	r28, 0x3d	; 61
 32e:	de b7       	in	r29, 0x3e	; 62
 330:	26 2f       	mov	r18, r22

	uint8_t pos;
	uint8_t LCD_Rows[4] = {0, 64, LCD_ROW_LENGTH, LCD_ROW_LENGTH+64};
 332:	19 82       	std	Y+1, r1	; 0x01
 334:	90 e4       	ldi	r25, 0x40	; 64
 336:	9a 83       	std	Y+2, r25	; 0x02
 338:	90 e1       	ldi	r25, 0x10	; 16
 33a:	9b 83       	std	Y+3, r25	; 0x03
 33c:	90 e5       	ldi	r25, 0x50	; 80
 33e:	9c 83       	std	Y+4, r25	; 0x04

	pos = LCD_SIZE + LCD_Rows[pos_y - 1] + (pos_x - 1);
	LCD_Interface.DataFlow.SendCommand(8, pos);
 340:	21 58       	subi	r18, 0x81	; 129
 342:	fe 01       	movw	r30, r28
 344:	e8 0f       	add	r30, r24
 346:	f1 1d       	adc	r31, r1
 348:	60 81       	ld	r22, Z
 34a:	62 0f       	add	r22, r18
 34c:	e0 91 95 00 	lds	r30, 0x0095
 350:	f0 91 96 00 	lds	r31, 0x0096
 354:	88 e0       	ldi	r24, 0x08	; 8
 356:	09 95       	icall
}
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	0f 90       	pop	r0
 35e:	0f 90       	pop	r0
 360:	cf 91       	pop	r28
 362:	df 91       	pop	r29
 364:	08 95       	ret

00000366 <LCD_DDR_E_set>:

void LCD_DDR_E_set() 		{ CMD_DIR |= (1<<LCD_E); }
 366:	b8 9a       	sbi	0x17, 0	; 23
 368:	08 95       	ret

0000036a <LCD_DDR_RS_set>:
void LCD_DDR_RS_set() 		{ CMD_DIR |= (1<<LCD_RS); }
 36a:	b9 9a       	sbi	0x17, 1	; 23
 36c:	08 95       	ret

0000036e <LCD_DDR_RW_set>:
void LCD_DDR_RW_set() 		{ CMD_DIR |= (1<<LCD_RW); }
 36e:	ba 9a       	sbi	0x17, 2	; 23
 370:	08 95       	ret

00000372 <LCD_DDR_E_clear>:
void LCD_DDR_E_clear() 		{ CMD_DIR &= ~(1<<LCD_E); }
 372:	b8 98       	cbi	0x17, 0	; 23
 374:	08 95       	ret

00000376 <LCD_DDR_RS_clear>:
void LCD_DDR_RS_clear() 	{ CMD_DIR &= ~(1<<LCD_RS); }
 376:	b9 98       	cbi	0x17, 1	; 23
 378:	08 95       	ret

0000037a <LCD_DDR_RW_clear>:
void LCD_DDR_RW_clear()		{ CMD_DIR &= ~(1<<LCD_RW); }
 37a:	ba 98       	cbi	0x17, 2	; 23
 37c:	08 95       	ret

0000037e <LCD_PORT_E_set>:
void LCD_PORT_E_set() 		{ CMD_PORT |= (1<<LCD_E); }
 37e:	c0 9a       	sbi	0x18, 0	; 24
 380:	08 95       	ret

00000382 <LCD_PORT_RS_set>:
void LCD_PORT_RS_set() 		{ CMD_PORT |= (1<<LCD_RS); }
 382:	c1 9a       	sbi	0x18, 1	; 24
 384:	08 95       	ret

00000386 <LCD_PORT_RW_set>:
void LCD_PORT_RW_set()		{ CMD_PORT |= (1<<LCD_RW); }
 386:	c2 9a       	sbi	0x18, 2	; 24
 388:	08 95       	ret

0000038a <LCD_PORT_E_clear>:
void LCD_PORT_E_clear() 	{ CMD_PORT &= ~(1<<LCD_E); }
 38a:	c0 98       	cbi	0x18, 0	; 24
 38c:	08 95       	ret

0000038e <LCD_PORT_RS_clear>:
void LCD_PORT_RS_clear() 	{ CMD_PORT &= ~(1<<LCD_RS); }
 38e:	c1 98       	cbi	0x18, 1	; 24
 390:	08 95       	ret

00000392 <LCD_PORT_RW_clear>:
void LCD_PORT_RW_clear() 	{ CMD_PORT &= ~(1<<LCD_RW); }
 392:	c2 98       	cbi	0x18, 2	; 24
 394:	08 95       	ret

00000396 <LCD_Menu_Initialize>:
						  }
					  };

void LCD_Menu_Initialize() {

	LCD_Menu.Options.CurrentFunctionName[0] = LCD_Menu.Options.LED.name;
 396:	80 91 fa 00 	lds	r24, 0x00FA
 39a:	90 91 fb 00 	lds	r25, 0x00FB
 39e:	90 93 f3 00 	sts	0x00F3, r25
 3a2:	80 93 f2 00 	sts	0x00F2, r24
	LCD_Menu.Options.CurrentFunctionName[1] = LCD_Menu.Options.Prefs.name;
 3a6:	80 91 fc 00 	lds	r24, 0x00FC
 3aa:	90 91 fd 00 	lds	r25, 0x00FD
 3ae:	90 93 f5 00 	sts	0x00F5, r25
 3b2:	80 93 f4 00 	sts	0x00F4, r24
	LCD_Menu.Options.CurrentFunctionName[2] = LCD_Menu.Options.Ch.name;
 3b6:	80 91 fe 00 	lds	r24, 0x00FE
 3ba:	90 91 ff 00 	lds	r25, 0x00FF
 3be:	90 93 f7 00 	sts	0x00F7, r25
 3c2:	80 93 f6 00 	sts	0x00F6, r24
	LCD_Menu.Options.CurrentFunctionName[3] = LCD_Menu.Options.Profs.name;
 3c6:	80 91 00 01 	lds	r24, 0x0100
 3ca:	90 91 01 01 	lds	r25, 0x0101
 3ce:	90 93 f9 00 	sts	0x00F9, r25
 3d2:	80 93 f8 00 	sts	0x00F8, r24
}
 3d6:	08 95       	ret

000003d8 <LCD_Menu_Enter>:
	char* functionName = "";
	uint8_t functionQueue = 0;

//	LCD_Menu.Options.CurrentFunction[functionQueue]();

	LCD_Interface.Position(1, 1);
 3d8:	e0 91 7b 00 	lds	r30, 0x007B
 3dc:	f0 91 7c 00 	lds	r31, 0x007C
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	61 e0       	ldi	r22, 0x01	; 1
 3e4:	09 95       	icall
	LCD_Interface.DataFlow.SendString("----- Menu -----");
 3e6:	e0 91 99 00 	lds	r30, 0x0099
 3ea:	f0 91 9a 00 	lds	r31, 0x009A
 3ee:	83 ea       	ldi	r24, 0xA3	; 163
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	09 95       	icall
	LCD_Interface.Position(2, 1);
 3f4:	e0 91 7b 00 	lds	r30, 0x007B
 3f8:	f0 91 7c 00 	lds	r31, 0x007C
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	61 e0       	ldi	r22, 0x01	; 1
 400:	09 95       	icall
	LCD_Interface.DataFlow.SendCharacter(S_ARROW_RIGHT);
 402:	e0 91 97 00 	lds	r30, 0x0097
 406:	f0 91 98 00 	lds	r31, 0x0098
 40a:	8e e7       	ldi	r24, 0x7E	; 126
 40c:	09 95       	icall
	LCD_Interface.DataFlow.SendCharacter(S_BLANK);
 40e:	e0 91 97 00 	lds	r30, 0x0097
 412:	f0 91 98 00 	lds	r31, 0x0098
 416:	80 e2       	ldi	r24, 0x20	; 32
 418:	09 95       	icall

	functionName = LCD_Menu.Options.CurrentFunctionName[functionQueue];
	LCD_Interface.DataFlow.SendString(functionName);
 41a:	e0 91 99 00 	lds	r30, 0x0099
 41e:	f0 91 9a 00 	lds	r31, 0x009A
 422:	80 91 f2 00 	lds	r24, 0x00F2
 426:	90 91 f3 00 	lds	r25, 0x00F3
 42a:	09 95       	icall
	default:
		break;

	}*/

}
 42c:	08 95       	ret

0000042e <LCD_Menu_LED_color>:

void LCD_Menu_LED_color() {

}
 42e:	08 95       	ret

00000430 <LCD_Menu_Preferences>:

void LCD_Menu_Preferences() {

}
 430:	08 95       	ret

00000432 <LCD_Menu_Channels>:

void LCD_Menu_Channels() {

}
 432:	08 95       	ret

00000434 <LCD_Menu_Profiles>:

void LCD_Menu_Profiles() {

}
 434:	08 95       	ret

00000436 <main>:

#define F_CPU 16000000UL

int main() {

	LCD_Interface.Initialize();
 436:	e0 91 79 00 	lds	r30, 0x0079
 43a:	f0 91 7a 00 	lds	r31, 0x007A
 43e:	09 95       	icall
	LCD_Menu.Initialize();
 440:	e0 91 de 00 	lds	r30, 0x00DE
 444:	f0 91 df 00 	lds	r31, 0x00DF
 448:	09 95       	icall
	LCD_Menu.Enter();
 44a:	e0 91 e0 00 	lds	r30, 0x00E0
 44e:	f0 91 e1 00 	lds	r31, 0x00E1
 452:	09 95       	icall
 454:	ff cf       	rjmp	.-2      	; 0x454 <main+0x1e>

00000456 <_exit>:
 456:	f8 94       	cli

00000458 <__stop_program>:
 458:	ff cf       	rjmp	.-2      	; 0x458 <__stop_program>
