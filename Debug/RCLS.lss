
RCLS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000570  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b6  00800060  00000570  000005e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001524  00000000  00000000  0000069c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000016c0  00000000  00000000  00001bc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	32 c0       	rjmp	.+100    	; 0x68 <__vector_1>
   4:	45 c0       	rjmp	.+138    	; 0x90 <__vector_2>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	11 e0       	ldi	r17, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e7       	ldi	r30, 0x70	; 112
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a6 31       	cpi	r26, 0x16	; 22
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	7c d2       	rcall	.+1272   	; 0x542 <main>
  4a:	90 c2       	rjmp	.+1312   	; 0x56c <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <BUTTONS_Initialize>:
											BUTTONS_Initialize
									   };

void BUTTONS_Initialize() {

	DDRC |= 1<<PC5;
  4e:	a5 9a       	sbi	0x14, 5	; 20
	BUTTON_DDR &= ~(1<<BUTTON_NEXT) | ~(1<<BUTTON_PREV) | ~(1<<BUTTON_SELECT) | ~(1<<BUTTON_RETURN);
  50:	81 b3       	in	r24, 0x11	; 17
  52:	81 bb       	out	0x11, r24	; 17
	BUTTON_PORT |= (1<<BUTTON_NEXT) | (1<<BUTTON_PREV) | (1<<BUTTON_SELECT) | (1<<BUTTON_RETURN);
  54:	82 b3       	in	r24, 0x12	; 18
  56:	8c 6c       	ori	r24, 0xCC	; 204
  58:	82 bb       	out	0x12, r24	; 18

	// interrupts on low level
	MCUCR &= ~(1<<ISC11) | ~(1<<ISC01) | ~(1<<ISC00) | ~(1<<ISC10);
  5a:	85 b7       	in	r24, 0x35	; 53
  5c:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0) | (1<<INT1);
  5e:	8b b7       	in	r24, 0x3b	; 59
  60:	80 6c       	ori	r24, 0xC0	; 192
  62:	8b bf       	out	0x3b, r24	; 59
	__asm__ __volatile__ ("sei" ::);
  64:	78 94       	sei
}
  66:	08 95       	ret

00000068 <__vector_1>:

ISR(INT0_vect) {
  68:	1f 92       	push	r1
  6a:	0f 92       	push	r0
  6c:	0f b6       	in	r0, 0x3f	; 63
  6e:	0f 92       	push	r0
  70:	11 24       	eor	r1, r1
  72:	8f 93       	push	r24

	while(bit_is_clear(BUTTON_PIN, BUTTON_NEXT)) { }
  74:	82 9b       	sbis	0x10, 2	; 16
  76:	fe cf       	rjmp	.-4      	; 0x74 <__vector_1+0xc>
	LCD_Menu.functionSelected = OPT_NEXT;
  78:	80 e3       	ldi	r24, 0x30	; 48
  7a:	80 93 f5 00 	sts	0x00F5, r24
	GIFR |= (1<<INTF0);
  7e:	8a b7       	in	r24, 0x3a	; 58
  80:	80 64       	ori	r24, 0x40	; 64
  82:	8a bf       	out	0x3a, r24	; 58
}
  84:	8f 91       	pop	r24
  86:	0f 90       	pop	r0
  88:	0f be       	out	0x3f, r0	; 63
  8a:	0f 90       	pop	r0
  8c:	1f 90       	pop	r1
  8e:	18 95       	reti

00000090 <__vector_2>:

ISR(INT1_vect) {
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24

	while(bit_is_clear(BUTTON_PIN, BUTTON_PREV)) { }
  9c:	83 9b       	sbis	0x10, 3	; 16
  9e:	fe cf       	rjmp	.-4      	; 0x9c <__vector_2+0xc>
	LCD_Menu.functionSelected = OPT_PREV;
  a0:	80 e4       	ldi	r24, 0x40	; 64
  a2:	80 93 f5 00 	sts	0x00F5, r24
	GIFR |= (1<<INTF1);
  a6:	8a b7       	in	r24, 0x3a	; 58
  a8:	80 68       	ori	r24, 0x80	; 128
  aa:	8a bf       	out	0x3a, r24	; 58
}
  ac:	8f 91       	pop	r24
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <LCD_SendCommand>:
								{LCD_SendCommand, LCD_SendCharacter, LCD_SendString, LCD_SendNumber, LCD_ProcessData},
								{LCD_ExecuteCMD,
								 LCD_WaitIfBusy}
								};

void LCD_SendCommand(uint8_t size, uint8_t cmd) {
  b8:	1f 93       	push	r17
  ba:	16 2f       	mov	r17, r22

	if (size == 4) {
  bc:	84 30       	cpi	r24, 0x04	; 4
  be:	99 f0       	breq	.+38     	; 0xe6 <LCD_SendCommand+0x2e>
		LCD_Interface.DataFlow.ProcessData(cmd & 0x0F);
		LCD_Interface.Com.ExecuteCMD();
	} else if (size == 8) {
  c0:	88 30       	cpi	r24, 0x08	; 8
  c2:	e9 f4       	brne	.+58     	; 0xfe <LCD_SendCommand+0x46>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c4:	80 e4       	ldi	r24, 0x40	; 64
  c6:	9f e1       	ldi	r25, 0x1F	; 31
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LCD_SendCommand+0x10>
		// temporary delay, until "WaitIfBusy" function is completed
		_delay_ms(2);
	//	LCD_Interface.Comm.WaitIfBusy();
		LCD_Interface.DataFlow.ProcessData(cmd >> 4);
  cc:	e0 91 9f 00 	lds	r30, 0x009F
  d0:	f0 91 a0 00 	lds	r31, 0x00A0
  d4:	86 2f       	mov	r24, r22
  d6:	82 95       	swap	r24
  d8:	8f 70       	andi	r24, 0x0F	; 15
  da:	09 95       	icall
		LCD_Interface.Com.ExecuteCMD();
  dc:	e0 91 a1 00 	lds	r30, 0x00A1
  e0:	f0 91 a2 00 	lds	r31, 0x00A2
  e4:	09 95       	icall
		LCD_Interface.DataFlow.ProcessData(cmd & 0x0F);
  e6:	e0 91 9f 00 	lds	r30, 0x009F
  ea:	f0 91 a0 00 	lds	r31, 0x00A0
  ee:	81 2f       	mov	r24, r17
  f0:	8f 70       	andi	r24, 0x0F	; 15
  f2:	09 95       	icall
		LCD_Interface.Com.ExecuteCMD();
  f4:	e0 91 a1 00 	lds	r30, 0x00A1
  f8:	f0 91 a2 00 	lds	r31, 0x00A2
  fc:	09 95       	icall
	}
}
  fe:	1f 91       	pop	r17
 100:	08 95       	ret

00000102 <LCD_ExecuteCMD>:

void LCD_ExecuteCMD() {

	LCD_Interface.Regs.PORT_E_set();
 102:	e0 91 8b 00 	lds	r30, 0x008B
 106:	f0 91 8c 00 	lds	r31, 0x008C
 10a:	09 95       	icall
	asm volatile("nop");
 10c:	00 00       	nop
	asm volatile("nop");
 10e:	00 00       	nop
	LCD_Interface.Regs.PORT_E_clear();
 110:	e0 91 91 00 	lds	r30, 0x0091
 114:	f0 91 92 00 	lds	r31, 0x0092
 118:	09 95       	icall
}
 11a:	08 95       	ret

0000011c <LCD_WaitIfBusy>:

void LCD_WaitIfBusy() {
 11c:	1f 93       	push	r17
 11e:	df 93       	push	r29
 120:	cf 93       	push	r28
 122:	0f 92       	push	r0
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62

	volatile uint8_t data;
	uint8_t busy_f = 1;

	LCD_Interface.Regs.PORT_RW_set();
 128:	e0 91 8f 00 	lds	r30, 0x008F
 12c:	f0 91 90 00 	lds	r31, 0x0090
 130:	09 95       	icall
	DATA_DIR &= ~(1<<LCD_DATA0) | ~(1<<LCD_DATA1) | ~(1<<LCD_DATA2) | ~(1<<LCD_DATA3);
 132:	84 b3       	in	r24, 0x14	; 20
 134:	84 bb       	out	0x14, r24	; 20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 136:	15 e0       	ldi	r17, 0x05	; 5

	while (busy_f) {

		LCD_Interface.Regs.PORT_E_set();
 138:	e0 91 8b 00 	lds	r30, 0x008B
 13c:	f0 91 8c 00 	lds	r31, 0x008C
 140:	09 95       	icall
 142:	81 2f       	mov	r24, r17
 144:	8a 95       	dec	r24
 146:	f1 f7       	brne	.-4      	; 0x144 <LCD_WaitIfBusy+0x28>
		_delay_us(1);
		data = DATA_PIN  << 4;
 148:	83 b3       	in	r24, 0x13	; 19
 14a:	82 95       	swap	r24
 14c:	80 7f       	andi	r24, 0xF0	; 240
 14e:	89 83       	std	Y+1, r24	; 0x01
		LCD_Interface.Regs.PORT_E_clear();
 150:	e0 91 91 00 	lds	r30, 0x0091
 154:	f0 91 92 00 	lds	r31, 0x0092
 158:	09 95       	icall
 15a:	81 2f       	mov	r24, r17
 15c:	8a 95       	dec	r24
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_WaitIfBusy+0x40>
		_delay_us(1);
		LCD_Interface.Regs.PORT_E_set();
 160:	e0 91 8b 00 	lds	r30, 0x008B
 164:	f0 91 8c 00 	lds	r31, 0x008C
 168:	09 95       	icall
 16a:	81 2f       	mov	r24, r17
 16c:	8a 95       	dec	r24
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_WaitIfBusy+0x50>
		_delay_us(1);
		data |= (DATA_PIN & 0x0F);
 170:	99 81       	ldd	r25, Y+1	; 0x01
 172:	83 b3       	in	r24, 0x13	; 19
 174:	8f 70       	andi	r24, 0x0F	; 15
 176:	89 2b       	or	r24, r25
 178:	89 83       	std	Y+1, r24	; 0x01
		LCD_Interface.Regs.PORT_E_clear();
 17a:	e0 91 91 00 	lds	r30, 0x0091
 17e:	f0 91 92 00 	lds	r31, 0x0092
 182:	09 95       	icall
 184:	81 2f       	mov	r24, r17
 186:	8a 95       	dec	r24
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_WaitIfBusy+0x6a>
		_delay_us(1);

		if (data & 0x80) { } else { busy_f = 0; }
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	87 fd       	sbrc	r24, 7
 18e:	d4 cf       	rjmp	.-88     	; 0x138 <LCD_WaitIfBusy+0x1c>
	}
	DATA_DIR |= (1<<LCD_DATA0) | (1<<LCD_DATA1) | (1<<LCD_DATA2) | (1<<LCD_DATA3);
 190:	84 b3       	in	r24, 0x14	; 20
 192:	8f 60       	ori	r24, 0x0F	; 15
 194:	84 bb       	out	0x14, r24	; 20
	LCD_Interface.Regs.PORT_RW_clear();
 196:	e0 91 95 00 	lds	r30, 0x0095
 19a:	f0 91 96 00 	lds	r31, 0x0096
 19e:	09 95       	icall
}
 1a0:	0f 90       	pop	r0
 1a2:	cf 91       	pop	r28
 1a4:	df 91       	pop	r29
 1a6:	1f 91       	pop	r17
 1a8:	08 95       	ret

000001aa <LCD_SendCharacter>:

void LCD_SendCharacter(uint8_t character) {
 1aa:	1f 93       	push	r17
 1ac:	18 2f       	mov	r17, r24
 1ae:	80 ea       	ldi	r24, 0xA0	; 160
 1b0:	8a 95       	dec	r24
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCD_SendCharacter+0x6>

	_delay_us(30);
	//LCD_Interface.Comm.WaitIfBusy();
	LCD_Interface.Regs.PORT_RS_set();
 1b4:	e0 91 8d 00 	lds	r30, 0x008D
 1b8:	f0 91 8e 00 	lds	r31, 0x008E
 1bc:	09 95       	icall
	LCD_Interface.DataFlow.SendCommand(8, character);
 1be:	e0 91 97 00 	lds	r30, 0x0097
 1c2:	f0 91 98 00 	lds	r31, 0x0098
 1c6:	88 e0       	ldi	r24, 0x08	; 8
 1c8:	61 2f       	mov	r22, r17
 1ca:	09 95       	icall
	LCD_Interface.Regs.PORT_RS_clear();
 1cc:	e0 91 93 00 	lds	r30, 0x0093
 1d0:	f0 91 94 00 	lds	r31, 0x0094
 1d4:	09 95       	icall
}
 1d6:	1f 91       	pop	r17
 1d8:	08 95       	ret

000001da <LCD_SendString>:

void LCD_SendString(char* charString) {
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	ec 01       	movw	r28, r24
 1e0:	06 c0       	rjmp	.+12     	; 0x1ee <LCD_SendString+0x14>

	while(*charString != '\0') {
		LCD_Interface.DataFlow.SendCharacter(*charString++);
 1e2:	21 96       	adiw	r28, 0x01	; 1
 1e4:	e0 91 99 00 	lds	r30, 0x0099
 1e8:	f0 91 9a 00 	lds	r31, 0x009A
 1ec:	09 95       	icall
	LCD_Interface.Regs.PORT_RS_clear();
}

void LCD_SendString(char* charString) {

	while(*charString != '\0') {
 1ee:	88 81       	ld	r24, Y
 1f0:	88 23       	and	r24, r24
 1f2:	b9 f7       	brne	.-18     	; 0x1e2 <LCD_SendString+0x8>
		LCD_Interface.DataFlow.SendCharacter(*charString++);
	}
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <LCD_SendNumber>:

void LCD_SendNumber(uint16_t number) {

}
 1fa:	08 95       	ret

000001fc <LCD_ProcessData>:

void LCD_ProcessData(int8_t data) {

	if (data & 0x01) {
 1fc:	99 27       	eor	r25, r25
 1fe:	87 fd       	sbrc	r24, 7
 200:	90 95       	com	r25
 202:	80 ff       	sbrs	r24, 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <LCD_ProcessData+0xe>
		DATA_PORT |=  (1<<LCD_DATA0);
 206:	a8 9a       	sbi	0x15, 0	; 21
 208:	01 c0       	rjmp	.+2      	; 0x20c <LCD_ProcessData+0x10>
	} else { DATA_PORT &= ~(1<<LCD_DATA0); }
 20a:	a8 98       	cbi	0x15, 0	; 21

	if (data & 0x02) {
 20c:	81 ff       	sbrs	r24, 1
 20e:	02 c0       	rjmp	.+4      	; 0x214 <LCD_ProcessData+0x18>
		DATA_PORT |=  (1<<LCD_DATA1);
 210:	a9 9a       	sbi	0x15, 1	; 21
 212:	01 c0       	rjmp	.+2      	; 0x216 <LCD_ProcessData+0x1a>
	} else { DATA_PORT &= ~(1<<LCD_DATA1); }
 214:	a9 98       	cbi	0x15, 1	; 21

	if (data & 0x04) {
 216:	82 ff       	sbrs	r24, 2
 218:	02 c0       	rjmp	.+4      	; 0x21e <LCD_ProcessData+0x22>
		DATA_PORT |=  (1<<LCD_DATA2);
 21a:	aa 9a       	sbi	0x15, 2	; 21
 21c:	01 c0       	rjmp	.+2      	; 0x220 <LCD_ProcessData+0x24>
	} else { DATA_PORT &= ~(1<<LCD_DATA2); }
 21e:	aa 98       	cbi	0x15, 2	; 21

	if (data & 0x08) {
 220:	83 ff       	sbrs	r24, 3
 222:	02 c0       	rjmp	.+4      	; 0x228 <LCD_ProcessData+0x2c>
		DATA_PORT |=  (1<<LCD_DATA3);
 224:	ab 9a       	sbi	0x15, 3	; 21
 226:	08 95       	ret
	} else { DATA_PORT &= ~(1<<LCD_DATA3); }
 228:	ab 98       	cbi	0x15, 3	; 21
 22a:	08 95       	ret

0000022c <LCD_Initialize>:
}

void LCD_Initialize() {
 22c:	0f 93       	push	r16
 22e:	1f 93       	push	r17

	DATA_DIR |= (1<<LCD_DATA0) | (1<<LCD_DATA1) | (1<<LCD_DATA2) | (1<<LCD_DATA3);
 230:	84 b3       	in	r24, 0x14	; 20
 232:	8f 60       	ori	r24, 0x0F	; 15
 234:	84 bb       	out	0x14, r24	; 20
	LCD_Interface.Regs.DDR_E_set();
 236:	e0 91 7f 00 	lds	r30, 0x007F
 23a:	f0 91 80 00 	lds	r31, 0x0080
 23e:	09 95       	icall
	LCD_Interface.Regs.DDR_RS_set();
 240:	e0 91 81 00 	lds	r30, 0x0081
 244:	f0 91 82 00 	lds	r31, 0x0082
 248:	09 95       	icall
	LCD_Interface.Regs.DDR_RW_set();
 24a:	e0 91 83 00 	lds	r30, 0x0083
 24e:	f0 91 84 00 	lds	r31, 0x0084
 252:	09 95       	icall
	LCD_Interface.Regs.PORT_E_clear();
 254:	e0 91 91 00 	lds	r30, 0x0091
 258:	f0 91 92 00 	lds	r31, 0x0092
 25c:	09 95       	icall
	LCD_Interface.Regs.PORT_RS_clear();
 25e:	e0 91 93 00 	lds	r30, 0x0093
 262:	f0 91 94 00 	lds	r31, 0x0094
 266:	09 95       	icall
	LCD_Interface.Regs.PORT_RW_clear();
 268:	e0 91 95 00 	lds	r30, 0x0095
 26c:	f0 91 96 00 	lds	r31, 0x0096
 270:	09 95       	icall
 272:	88 ec       	ldi	r24, 0xC8	; 200
 274:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 276:	20 e9       	ldi	r18, 0x90	; 144
 278:	31 e0       	ldi	r19, 0x01	; 1
 27a:	f9 01       	movw	r30, r18
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <LCD_Initialize+0x50>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 280:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 282:	d9 f7       	brne	.-10     	; 0x27a <LCD_Initialize+0x4e>

	_delay_ms(20);
	LCD_Interface.DataFlow.SendCommand(4, 0x03);	_delay_ms(5);
 284:	e0 91 97 00 	lds	r30, 0x0097
 288:	f0 91 98 00 	lds	r31, 0x0098
 28c:	84 e0       	ldi	r24, 0x04	; 4
 28e:	63 e0       	ldi	r22, 0x03	; 3
 290:	09 95       	icall
 292:	80 e2       	ldi	r24, 0x20	; 32
 294:	9e e4       	ldi	r25, 0x4E	; 78
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <LCD_Initialize+0x6a>
	LCD_Interface.DataFlow.SendCommand(4, 0x03);	_delay_ms(2);
 29a:	e0 91 97 00 	lds	r30, 0x0097
 29e:	f0 91 98 00 	lds	r31, 0x0098
 2a2:	84 e0       	ldi	r24, 0x04	; 4
 2a4:	63 e0       	ldi	r22, 0x03	; 3
 2a6:	09 95       	icall
 2a8:	00 e4       	ldi	r16, 0x40	; 64
 2aa:	1f e1       	ldi	r17, 0x1F	; 31
 2ac:	c8 01       	movw	r24, r16
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <LCD_Initialize+0x82>
	LCD_Interface.DataFlow.SendCommand(4, 0x03);	_delay_ms(2);
 2b2:	e0 91 97 00 	lds	r30, 0x0097
 2b6:	f0 91 98 00 	lds	r31, 0x0098
 2ba:	84 e0       	ldi	r24, 0x04	; 4
 2bc:	63 e0       	ldi	r22, 0x03	; 3
 2be:	09 95       	icall
 2c0:	c8 01       	movw	r24, r16
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LCD_Initialize+0x96>
	LCD_Interface.DataFlow.SendCommand(4, 0x02);	_delay_ms(2);
 2c6:	e0 91 97 00 	lds	r30, 0x0097
 2ca:	f0 91 98 00 	lds	r31, 0x0098
 2ce:	84 e0       	ldi	r24, 0x04	; 4
 2d0:	62 e0       	ldi	r22, 0x02	; 2
 2d2:	09 95       	icall
 2d4:	c8 01       	movw	r24, r16
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <LCD_Initialize+0xaa>
	// 4-bit mode, 2 lines
	LCD_Interface.DataFlow.SendCommand(4, 0x2); 	_delay_ms(2);
 2da:	e0 91 97 00 	lds	r30, 0x0097
 2de:	f0 91 98 00 	lds	r31, 0x0098
 2e2:	84 e0       	ldi	r24, 0x04	; 4
 2e4:	62 e0       	ldi	r22, 0x02	; 2
 2e6:	09 95       	icall
 2e8:	c8 01       	movw	r24, r16
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <LCD_Initialize+0xbe>
	LCD_Interface.DataFlow.SendCommand(4, 0x8); 	_delay_ms(2);
 2ee:	e0 91 97 00 	lds	r30, 0x0097
 2f2:	f0 91 98 00 	lds	r31, 0x0098
 2f6:	84 e0       	ldi	r24, 0x04	; 4
 2f8:	68 e0       	ldi	r22, 0x08	; 8
 2fa:	09 95       	icall
 2fc:	c8 01       	movw	r24, r16
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <LCD_Initialize+0xd2>

	// display on
	LCD_Interface.DataFlow.SendCommand(8, 0x0C);
 302:	e0 91 97 00 	lds	r30, 0x0097
 306:	f0 91 98 00 	lds	r31, 0x0098
 30a:	88 e0       	ldi	r24, 0x08	; 8
 30c:	6c e0       	ldi	r22, 0x0C	; 12
 30e:	09 95       	icall
	//LCD_Interface.Comm.WaitIfBusy();

	// clear display, return position
	LCD_Interface.DataFlow.SendCommand(8, 0x01);
 310:	e0 91 97 00 	lds	r30, 0x0097
 314:	f0 91 98 00 	lds	r31, 0x0098
 318:	88 e0       	ldi	r24, 0x08	; 8
 31a:	61 e0       	ldi	r22, 0x01	; 1
 31c:	09 95       	icall
	//LCD_Interface.Comm.WaitIfBusy();
	LCD_Interface.DataFlow.SendString("Initialization");_delay_ms(500);
 31e:	e0 91 9b 00 	lds	r30, 0x009B
 322:	f0 91 9c 00 	lds	r31, 0x009C
 326:	82 e6       	ldi	r24, 0x62	; 98
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	09 95       	icall
 32c:	88 e8       	ldi	r24, 0x88	; 136
 32e:	93 e1       	ldi	r25, 0x13	; 19
 330:	20 e9       	ldi	r18, 0x90	; 144
 332:	31 e0       	ldi	r19, 0x01	; 1
 334:	f9 01       	movw	r30, r18
 336:	31 97       	sbiw	r30, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <LCD_Initialize+0x10a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 33a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 33c:	d9 f7       	brne	.-10     	; 0x334 <LCD_Initialize+0x108>
	//LCD_Interface.Comm.WaitIfBusy();
	LCD_Interface.Position(2, 1);
 33e:	e0 91 7d 00 	lds	r30, 0x007D
 342:	f0 91 7e 00 	lds	r31, 0x007E
 346:	82 e0       	ldi	r24, 0x02	; 2
 348:	61 e0       	ldi	r22, 0x01	; 1
 34a:	09 95       	icall
	//LCD_Interface.Comm.WaitIfBusy();
	LCD_Interface.DataFlow.SendString("COMPLETED");	_delay_ms(1000);
 34c:	e0 91 9b 00 	lds	r30, 0x009B
 350:	f0 91 9c 00 	lds	r31, 0x009C
 354:	81 e7       	ldi	r24, 0x71	; 113
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	09 95       	icall
 35a:	80 e1       	ldi	r24, 0x10	; 16
 35c:	97 e2       	ldi	r25, 0x27	; 39
 35e:	20 e9       	ldi	r18, 0x90	; 144
 360:	31 e0       	ldi	r19, 0x01	; 1
 362:	f9 01       	movw	r30, r18
 364:	31 97       	sbiw	r30, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <LCD_Initialize+0x138>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 368:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 36a:	d9 f7       	brne	.-10     	; 0x362 <LCD_Initialize+0x136>
	LCD_Interface.DataFlow.SendCommand(8, 0x01);
 36c:	e0 91 97 00 	lds	r30, 0x0097
 370:	f0 91 98 00 	lds	r31, 0x0098
 374:	88 e0       	ldi	r24, 0x08	; 8
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	09 95       	icall
	LCD_Interface.Position(1, 1);
 37a:	e0 91 7d 00 	lds	r30, 0x007D
 37e:	f0 91 7e 00 	lds	r31, 0x007E
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	61 e0       	ldi	r22, 0x01	; 1
 386:	09 95       	icall
}
 388:	1f 91       	pop	r17
 38a:	0f 91       	pop	r16
 38c:	08 95       	ret

0000038e <LCD_Position>:

void LCD_Position(uint8_t pos_y, uint8_t pos_x) {
 38e:	df 93       	push	r29
 390:	cf 93       	push	r28
 392:	00 d0       	rcall	.+0      	; 0x394 <LCD_Position+0x6>
 394:	00 d0       	rcall	.+0      	; 0x396 <LCD_Position+0x8>
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
 39a:	26 2f       	mov	r18, r22

	uint8_t pos;
	uint8_t LCD_Rows[4] = {0, 64, LCD_ROW_LENGTH, LCD_ROW_LENGTH+64};
 39c:	19 82       	std	Y+1, r1	; 0x01
 39e:	90 e4       	ldi	r25, 0x40	; 64
 3a0:	9a 83       	std	Y+2, r25	; 0x02
 3a2:	90 e1       	ldi	r25, 0x10	; 16
 3a4:	9b 83       	std	Y+3, r25	; 0x03
 3a6:	90 e5       	ldi	r25, 0x50	; 80
 3a8:	9c 83       	std	Y+4, r25	; 0x04

	pos = LCD_SIZE + LCD_Rows[pos_y - 1] + (pos_x - 1);
	LCD_Interface.DataFlow.SendCommand(8, pos);
 3aa:	21 58       	subi	r18, 0x81	; 129
 3ac:	fe 01       	movw	r30, r28
 3ae:	e8 0f       	add	r30, r24
 3b0:	f1 1d       	adc	r31, r1
 3b2:	60 81       	ld	r22, Z
 3b4:	62 0f       	add	r22, r18
 3b6:	e0 91 97 00 	lds	r30, 0x0097
 3ba:	f0 91 98 00 	lds	r31, 0x0098
 3be:	88 e0       	ldi	r24, 0x08	; 8
 3c0:	09 95       	icall
}
 3c2:	0f 90       	pop	r0
 3c4:	0f 90       	pop	r0
 3c6:	0f 90       	pop	r0
 3c8:	0f 90       	pop	r0
 3ca:	cf 91       	pop	r28
 3cc:	df 91       	pop	r29
 3ce:	08 95       	ret

000003d0 <LCD_DDR_E_set>:

void LCD_DDR_E_set() 		{ CMD_DIR |= (1<<LCD_E); }
 3d0:	b8 9a       	sbi	0x17, 0	; 23
 3d2:	08 95       	ret

000003d4 <LCD_DDR_RS_set>:
void LCD_DDR_RS_set() 		{ CMD_DIR |= (1<<LCD_RS); }
 3d4:	b9 9a       	sbi	0x17, 1	; 23
 3d6:	08 95       	ret

000003d8 <LCD_DDR_RW_set>:
void LCD_DDR_RW_set() 		{ CMD_DIR |= (1<<LCD_RW); }
 3d8:	ba 9a       	sbi	0x17, 2	; 23
 3da:	08 95       	ret

000003dc <LCD_DDR_E_clear>:
void LCD_DDR_E_clear() 		{ CMD_DIR &= ~(1<<LCD_E); }
 3dc:	b8 98       	cbi	0x17, 0	; 23
 3de:	08 95       	ret

000003e0 <LCD_DDR_RS_clear>:
void LCD_DDR_RS_clear() 	{ CMD_DIR &= ~(1<<LCD_RS); }
 3e0:	b9 98       	cbi	0x17, 1	; 23
 3e2:	08 95       	ret

000003e4 <LCD_DDR_RW_clear>:
void LCD_DDR_RW_clear()		{ CMD_DIR &= ~(1<<LCD_RW); }
 3e4:	ba 98       	cbi	0x17, 2	; 23
 3e6:	08 95       	ret

000003e8 <LCD_PORT_E_set>:
void LCD_PORT_E_set() 		{ CMD_PORT |= (1<<LCD_E); }
 3e8:	c0 9a       	sbi	0x18, 0	; 24
 3ea:	08 95       	ret

000003ec <LCD_PORT_RS_set>:
void LCD_PORT_RS_set() 		{ CMD_PORT |= (1<<LCD_RS); }
 3ec:	c1 9a       	sbi	0x18, 1	; 24
 3ee:	08 95       	ret

000003f0 <LCD_PORT_RW_set>:
void LCD_PORT_RW_set()		{ CMD_PORT |= (1<<LCD_RW); }
 3f0:	c2 9a       	sbi	0x18, 2	; 24
 3f2:	08 95       	ret

000003f4 <LCD_PORT_E_clear>:
void LCD_PORT_E_clear() 	{ CMD_PORT &= ~(1<<LCD_E); }
 3f4:	c0 98       	cbi	0x18, 0	; 24
 3f6:	08 95       	ret

000003f8 <LCD_PORT_RS_clear>:
void LCD_PORT_RS_clear() 	{ CMD_PORT &= ~(1<<LCD_RS); }
 3f8:	c1 98       	cbi	0x18, 1	; 24
 3fa:	08 95       	ret

000003fc <LCD_PORT_RW_clear>:
void LCD_PORT_RW_clear() 	{ CMD_PORT &= ~(1<<LCD_RW); }
 3fc:	c2 98       	cbi	0x18, 2	; 24
 3fe:	08 95       	ret

00000400 <LCD_Menu_Initialize>:
						  }
					  };

void LCD_Menu_Initialize() {

	LCD_Menu.Options.CurrentFunctionName[0] = LCD_Menu.Options.LED.name;
 400:	80 91 0e 01 	lds	r24, 0x010E
 404:	90 91 0f 01 	lds	r25, 0x010F
 408:	90 93 07 01 	sts	0x0107, r25
 40c:	80 93 06 01 	sts	0x0106, r24
	LCD_Menu.Options.CurrentFunctionName[1] = LCD_Menu.Options.Prefs.name;
 410:	80 91 10 01 	lds	r24, 0x0110
 414:	90 91 11 01 	lds	r25, 0x0111
 418:	90 93 09 01 	sts	0x0109, r25
 41c:	80 93 08 01 	sts	0x0108, r24
	LCD_Menu.Options.CurrentFunctionName[2] = LCD_Menu.Options.Ch.name;
 420:	80 91 12 01 	lds	r24, 0x0112
 424:	90 91 13 01 	lds	r25, 0x0113
 428:	90 93 0b 01 	sts	0x010B, r25
 42c:	80 93 0a 01 	sts	0x010A, r24
	LCD_Menu.Options.CurrentFunctionName[3] = LCD_Menu.Options.Profs.name;
 430:	80 91 14 01 	lds	r24, 0x0114
 434:	90 91 15 01 	lds	r25, 0x0115
 438:	90 93 0d 01 	sts	0x010D, r25
 43c:	80 93 0c 01 	sts	0x010C, r24
}
 440:	08 95       	ret

00000442 <LCD_Menu_Enter>:

void LCD_Menu_Enter() {
 442:	0f 93       	push	r16
 444:	1f 93       	push	r17
	char* functionName = "";
	uint8_t functionQueue = 0;

//	LCD_Menu.Options.CurrentFunction[functionQueue]();

	LCD_Interface.Position(1, 1);
 446:	e0 91 7d 00 	lds	r30, 0x007D
 44a:	f0 91 7e 00 	lds	r31, 0x007E
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	61 e0       	ldi	r22, 0x01	; 1
 452:	09 95       	icall
	LCD_Interface.DataFlow.SendString("----- Menu -----");
 454:	e0 91 9b 00 	lds	r30, 0x009B
 458:	f0 91 9c 00 	lds	r31, 0x009C
 45c:	85 ea       	ldi	r24, 0xA5	; 165
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	09 95       	icall
	LCD_Interface.Position(2, 1);
 462:	e0 91 7d 00 	lds	r30, 0x007D
 466:	f0 91 7e 00 	lds	r31, 0x007E
 46a:	82 e0       	ldi	r24, 0x02	; 2
 46c:	61 e0       	ldi	r22, 0x01	; 1
 46e:	09 95       	icall
	LCD_Interface.DataFlow.SendCharacter(S_ARROW_RIGHT);
 470:	e0 91 99 00 	lds	r30, 0x0099
 474:	f0 91 9a 00 	lds	r31, 0x009A
 478:	8e e7       	ldi	r24, 0x7E	; 126
 47a:	09 95       	icall
	LCD_Interface.DataFlow.SendCharacter(S_BLANK);
 47c:	e0 91 99 00 	lds	r30, 0x0099
 480:	f0 91 9a 00 	lds	r31, 0x009A
 484:	80 e2       	ldi	r24, 0x20	; 32
 486:	09 95       	icall

	functionName = LCD_Menu.Options.CurrentFunctionName[functionQueue];
	LCD_Interface.DataFlow.SendString(functionName);
 488:	e0 91 9b 00 	lds	r30, 0x009B
 48c:	f0 91 9c 00 	lds	r31, 0x009C
 490:	80 91 06 01 	lds	r24, 0x0106
 494:	90 91 07 01 	lds	r25, 0x0107
 498:	09 95       	icall
 49a:	10 e0       	ldi	r17, 0x00	; 0
				LCD_Interface.Position(2, 1);
				LCD_Interface.DataFlow.SendCharacter(S_ARROW_RIGHT);
				LCD_Interface.DataFlow.SendCharacter(S_BLANK);
				functionName = LCD_Menu.Options.CurrentFunctionName[functionQueue];
				LCD_Interface.DataFlow.SendString(functionName);
				LCD_Menu.functionSelected = OPT_VOID;
 49c:	00 e5       	ldi	r16, 0x50	; 80
	functionName = LCD_Menu.Options.CurrentFunctionName[functionQueue];
	LCD_Interface.DataFlow.SendString(functionName);

	while(1) {

		while(LCD_Menu.functionSelected == OPT_VOID) { if (LCD_Menu.functionSelected != OPT_VOID) { break;} }
 49e:	80 91 f5 00 	lds	r24, 0x00F5
 4a2:	80 35       	cpi	r24, 0x50	; 80
 4a4:	e1 f3       	breq	.-8      	; 0x49e <__stack+0x3f>

		LCD_Interface.Position(2, 1);
 4a6:	e0 91 7d 00 	lds	r30, 0x007D
 4aa:	f0 91 7e 00 	lds	r31, 0x007E
 4ae:	82 e0       	ldi	r24, 0x02	; 2
 4b0:	61 e0       	ldi	r22, 0x01	; 1
 4b2:	09 95       	icall
		LCD_Interface.DataFlow.SendString("                ");
 4b4:	e0 91 9b 00 	lds	r30, 0x009B
 4b8:	f0 91 9c 00 	lds	r31, 0x009C
 4bc:	86 eb       	ldi	r24, 0xB6	; 182
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	09 95       	icall

		switch(LCD_Menu.functionSelected)
 4c2:	80 91 f5 00 	lds	r24, 0x00F5
 4c6:	80 33       	cpi	r24, 0x30	; 48
 4c8:	19 f0       	breq	.+6      	; 0x4d0 <__stack+0x71>
 4ca:	80 34       	cpi	r24, 0x40	; 64
 4cc:	41 f7       	brne	.-48     	; 0x49e <__stack+0x3f>
 4ce:	08 c0       	rjmp	.+16     	; 0x4e0 <__stack+0x81>
		{
			case OPT_NEXT:
				if (functionQueue >= 0 && functionQueue < OPT_QUANTITY-1) {
 4d0:	13 30       	cpi	r17, 0x03	; 3
 4d2:	10 f4       	brcc	.+4      	; 0x4d8 <__stack+0x79>
					functionQueue++;
 4d4:	1f 5f       	subi	r17, 0xFF	; 255
 4d6:	0d c0       	rjmp	.+26     	; 0x4f2 <__stack+0x93>
				} else if (functionQueue == OPT_QUANTITY-1) {
 4d8:	13 30       	cpi	r17, 0x03	; 3
 4da:	59 f4       	brne	.+22     	; 0x4f2 <__stack+0x93>
 4dc:	10 e0       	ldi	r17, 0x00	; 0
 4de:	09 c0       	rjmp	.+18     	; 0x4f2 <__stack+0x93>
				LCD_Interface.DataFlow.SendString(functionName);
				LCD_Menu.functionSelected = OPT_VOID;
				break;

			case OPT_PREV:
				if (functionQueue > 0 && functionQueue < OPT_QUANTITY) {
 4e0:	81 2f       	mov	r24, r17
 4e2:	81 50       	subi	r24, 0x01	; 1
 4e4:	83 30       	cpi	r24, 0x03	; 3
 4e6:	10 f4       	brcc	.+4      	; 0x4ec <__stack+0x8d>
 4e8:	18 2f       	mov	r17, r24
 4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <__stack+0x93>
					functionQueue--;
				} else if (functionQueue == 0) {
 4ec:	11 23       	and	r17, r17
 4ee:	09 f4       	brne	.+2      	; 0x4f2 <__stack+0x93>
 4f0:	13 e0       	ldi	r17, 0x03	; 3
					functionQueue = OPT_QUANTITY-1;
				}

				LCD_Interface.Position(2, 1);
 4f2:	e0 91 7d 00 	lds	r30, 0x007D
 4f6:	f0 91 7e 00 	lds	r31, 0x007E
 4fa:	82 e0       	ldi	r24, 0x02	; 2
 4fc:	61 e0       	ldi	r22, 0x01	; 1
 4fe:	09 95       	icall
				LCD_Interface.DataFlow.SendCharacter(S_ARROW_RIGHT);
 500:	e0 91 99 00 	lds	r30, 0x0099
 504:	f0 91 9a 00 	lds	r31, 0x009A
 508:	8e e7       	ldi	r24, 0x7E	; 126
 50a:	09 95       	icall
				LCD_Interface.DataFlow.SendCharacter(S_BLANK);
 50c:	e0 91 99 00 	lds	r30, 0x0099
 510:	f0 91 9a 00 	lds	r31, 0x009A
 514:	80 e2       	ldi	r24, 0x20	; 32
 516:	09 95       	icall
				functionName = LCD_Menu.Options.CurrentFunctionName[functionQueue];
				LCD_Interface.DataFlow.SendString(functionName);
 518:	e1 2f       	mov	r30, r17
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	ee 0f       	add	r30, r30
 51e:	ff 1f       	adc	r31, r31
 520:	ef 5f       	subi	r30, 0xFF	; 255
 522:	fe 4f       	sbci	r31, 0xFE	; 254
 524:	20 91 9b 00 	lds	r18, 0x009B
 528:	30 91 9c 00 	lds	r19, 0x009C
 52c:	85 81       	ldd	r24, Z+5	; 0x05
 52e:	96 81       	ldd	r25, Z+6	; 0x06
 530:	f9 01       	movw	r30, r18
 532:	09 95       	icall
				LCD_Menu.functionSelected = OPT_VOID;
 534:	00 93 f5 00 	sts	0x00F5, r16
 538:	b2 cf       	rjmp	.-156    	; 0x49e <__stack+0x3f>

0000053a <LCD_Menu_LED_color>:

}

void LCD_Menu_LED_color() {

}
 53a:	08 95       	ret

0000053c <LCD_Menu_Preferences>:

void LCD_Menu_Preferences() {

}
 53c:	08 95       	ret

0000053e <LCD_Menu_Channels>:

void LCD_Menu_Channels() {

}
 53e:	08 95       	ret

00000540 <LCD_Menu_Profiles>:

void LCD_Menu_Profiles() {

}
 540:	08 95       	ret

00000542 <main>:

#define F_CPU 16000000UL

int main() {

	LCD_Interface.Initialize();
 542:	e0 91 7b 00 	lds	r30, 0x007B
 546:	f0 91 7c 00 	lds	r31, 0x007C
 54a:	09 95       	icall
	BUTTONS_Interface.Initialize();
 54c:	e0 91 60 00 	lds	r30, 0x0060
 550:	f0 91 61 00 	lds	r31, 0x0061
 554:	09 95       	icall
	LCD_Menu.Initialize();
 556:	e0 91 f1 00 	lds	r30, 0x00F1
 55a:	f0 91 f2 00 	lds	r31, 0x00F2
 55e:	09 95       	icall
	LCD_Menu.Enter();
 560:	e0 91 f3 00 	lds	r30, 0x00F3
 564:	f0 91 f4 00 	lds	r31, 0x00F4
 568:	09 95       	icall
 56a:	ff cf       	rjmp	.-2      	; 0x56a <main+0x28>

0000056c <_exit>:
 56c:	f8 94       	cli

0000056e <__stop_program>:
 56e:	ff cf       	rjmp	.-2      	; 0x56e <__stop_program>
