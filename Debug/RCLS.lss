
RCLS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000790  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00800060  00000790  00000804  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000019d4  00000000  00000000  00000910  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001bdd  00000000  00000000  000022e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	32 c0       	rjmp	.+100    	; 0x68 <__vector_1>
   4:	43 c0       	rjmp	.+134    	; 0x8c <__vector_2>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	11 e0       	ldi	r17, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e9       	ldi	r30, 0x90	; 144
  3a:	f7 e0       	ldi	r31, 0x07	; 7
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	8c d3       	rcall	.+1816   	; 0x762 <main>
  4a:	a0 c3       	rjmp	.+1856   	; 0x78c <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <BUTTONS_Initialize>:
											BUTTONS_Initialize
									   };

void BUTTONS_Initialize() {

	DDRC |= 1<<PC5;
  4e:	a5 9a       	sbi	0x14, 5	; 20
	BUTTON_DDR &= ~(1<<BUTTON_NEXT) | ~(1<<BUTTON_PREV) | ~(1<<BUTTON_SELECT) | ~(1<<BUTTON_RETURN);
  50:	81 b3       	in	r24, 0x11	; 17
  52:	81 bb       	out	0x11, r24	; 17
	BUTTON_PORT |= (1<<BUTTON_NEXT) | (1<<BUTTON_PREV) | (1<<BUTTON_SELECT) | (1<<BUTTON_RETURN);
  54:	82 b3       	in	r24, 0x12	; 18
  56:	8c 6c       	ori	r24, 0xCC	; 204
  58:	82 bb       	out	0x12, r24	; 18

	// interrupts on low level
	MCUCR &= ~(1<<ISC11) | ~(1<<ISC01) | ~(1<<ISC00) | ~(1<<ISC10);
  5a:	85 b7       	in	r24, 0x35	; 53
  5c:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0) | (1<<INT1);
  5e:	8b b7       	in	r24, 0x3b	; 59
  60:	80 6c       	ori	r24, 0xC0	; 192
  62:	8b bf       	out	0x3b, r24	; 59
	__asm__ __volatile__ ("sei" ::);
  64:	78 94       	sei
}
  66:	08 95       	ret

00000068 <__vector_1>:

ISR(INT0_vect, ISR_NAKED) {

	while(bit_is_clear(BUTTON_PIN, BUTTON_NEXT)) { }
  68:	82 9b       	sbis	0x10, 2	; 16
  6a:	fe cf       	rjmp	.-4      	; 0x68 <__vector_1>
	LCD_Menu.optionSelected = OPT_NEXT;
  6c:	80 e3       	ldi	r24, 0x30	; 48
  6e:	80 93 fb 00 	sts	0x00FB, r24
  72:	88 eb       	ldi	r24, 0xB8	; 184
  74:	9b e0       	ldi	r25, 0x0B	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  76:	20 e9       	ldi	r18, 0x90	; 144
  78:	31 e0       	ldi	r19, 0x01	; 1
  7a:	f9 01       	movw	r30, r18
  7c:	31 97       	sbiw	r30, 0x01	; 1
  7e:	f1 f7       	brne	.-4      	; 0x7c <__vector_1+0x14>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  80:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  82:	d9 f7       	brne	.-10     	; 0x7a <__vector_1+0x12>
	_delay_ms(300);
	GIFR |= (1<<INTF0);
  84:	8a b7       	in	r24, 0x3a	; 58
  86:	80 64       	ori	r24, 0x40	; 64
  88:	8a bf       	out	0x3a, r24	; 58
	reti();
  8a:	18 95       	reti

0000008c <__vector_2>:
}

ISR(INT1_vect, ISR_NAKED) {

	while(bit_is_clear(BUTTON_PIN, BUTTON_PREV)) { }
  8c:	83 9b       	sbis	0x10, 3	; 16
  8e:	fe cf       	rjmp	.-4      	; 0x8c <__vector_2>
	LCD_Menu.optionSelected = OPT_SELECT;//OPT_PREV;
  90:	80 e1       	ldi	r24, 0x10	; 16
  92:	80 93 fb 00 	sts	0x00FB, r24
  96:	88 eb       	ldi	r24, 0xB8	; 184
  98:	9b e0       	ldi	r25, 0x0B	; 11
  9a:	20 e9       	ldi	r18, 0x90	; 144
  9c:	31 e0       	ldi	r19, 0x01	; 1
  9e:	f9 01       	movw	r30, r18
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <__vector_2+0x14>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a6:	d9 f7       	brne	.-10     	; 0x9e <__vector_2+0x12>
	_delay_ms(300);
	GIFR |= (1<<INTF1);
  a8:	8a b7       	in	r24, 0x3a	; 58
  aa:	80 68       	ori	r24, 0x80	; 128
  ac:	8a bf       	out	0x3a, r24	; 58
	reti();
  ae:	18 95       	reti

000000b0 <LCD_SendCommand>:
								{LCD_SendCommand, LCD_SendCharacter, LCD_SendString, LCD_SendNumber, LCD_ProcessData},
								{LCD_ExecuteCMD,
								 LCD_WaitIfBusy}
								};

void LCD_SendCommand(uint8_t size, uint8_t cmd) {
  b0:	1f 93       	push	r17
  b2:	16 2f       	mov	r17, r22

	if (size == 4) {
  b4:	84 30       	cpi	r24, 0x04	; 4
  b6:	99 f0       	breq	.+38     	; 0xde <LCD_SendCommand+0x2e>
		LCD_Interface.DataFlow.ProcessData(cmd & 0x0F);
		LCD_Interface.Com.ExecuteCMD();
	} else if (size == 8) {
  b8:	88 30       	cpi	r24, 0x08	; 8
  ba:	e9 f4       	brne	.+58     	; 0xf6 <LCD_SendCommand+0x46>
  bc:	80 e4       	ldi	r24, 0x40	; 64
  be:	9f e1       	ldi	r25, 0x1F	; 31
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <LCD_SendCommand+0x10>
		// temporary delay, until "WaitIfBusy" function is completed
		_delay_ms(2);
	//	LCD_Interface.Comm.WaitIfBusy();
		LCD_Interface.DataFlow.ProcessData(cmd >> 4);
  c4:	e0 91 9f 00 	lds	r30, 0x009F
  c8:	f0 91 a0 00 	lds	r31, 0x00A0
  cc:	86 2f       	mov	r24, r22
  ce:	82 95       	swap	r24
  d0:	8f 70       	andi	r24, 0x0F	; 15
  d2:	09 95       	icall
		LCD_Interface.Com.ExecuteCMD();
  d4:	e0 91 a1 00 	lds	r30, 0x00A1
  d8:	f0 91 a2 00 	lds	r31, 0x00A2
  dc:	09 95       	icall
		LCD_Interface.DataFlow.ProcessData(cmd & 0x0F);
  de:	e0 91 9f 00 	lds	r30, 0x009F
  e2:	f0 91 a0 00 	lds	r31, 0x00A0
  e6:	81 2f       	mov	r24, r17
  e8:	8f 70       	andi	r24, 0x0F	; 15
  ea:	09 95       	icall
		LCD_Interface.Com.ExecuteCMD();
  ec:	e0 91 a1 00 	lds	r30, 0x00A1
  f0:	f0 91 a2 00 	lds	r31, 0x00A2
  f4:	09 95       	icall
	}
}
  f6:	1f 91       	pop	r17
  f8:	08 95       	ret

000000fa <LCD_ExecuteCMD>:

void LCD_ExecuteCMD() {

	LCD_Interface.Regs.PORT_E_set();
  fa:	e0 91 8b 00 	lds	r30, 0x008B
  fe:	f0 91 8c 00 	lds	r31, 0x008C
 102:	09 95       	icall
	asm volatile("nop");
 104:	00 00       	nop
	asm volatile("nop");
 106:	00 00       	nop
	LCD_Interface.Regs.PORT_E_clear();
 108:	e0 91 91 00 	lds	r30, 0x0091
 10c:	f0 91 92 00 	lds	r31, 0x0092
 110:	09 95       	icall
}
 112:	08 95       	ret

00000114 <LCD_WaitIfBusy>:

void LCD_WaitIfBusy() {
 114:	1f 93       	push	r17
 116:	df 93       	push	r29
 118:	cf 93       	push	r28
 11a:	0f 92       	push	r0
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62

	volatile uint8_t data;
	uint8_t busy_f = 1;

	LCD_Interface.Regs.PORT_RW_set();
 120:	e0 91 8f 00 	lds	r30, 0x008F
 124:	f0 91 90 00 	lds	r31, 0x0090
 128:	09 95       	icall
	DATA_DIR &= ~(1<<LCD_DATA0) | ~(1<<LCD_DATA1) | ~(1<<LCD_DATA2) | ~(1<<LCD_DATA3);
 12a:	84 b3       	in	r24, 0x14	; 20
 12c:	84 bb       	out	0x14, r24	; 20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 12e:	15 e0       	ldi	r17, 0x05	; 5

	while (busy_f) {

		LCD_Interface.Regs.PORT_E_set();
 130:	e0 91 8b 00 	lds	r30, 0x008B
 134:	f0 91 8c 00 	lds	r31, 0x008C
 138:	09 95       	icall
 13a:	81 2f       	mov	r24, r17
 13c:	8a 95       	dec	r24
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCD_WaitIfBusy+0x28>
		_delay_us(1);
		data = DATA_PIN  << 4;
 140:	83 b3       	in	r24, 0x13	; 19
 142:	82 95       	swap	r24
 144:	80 7f       	andi	r24, 0xF0	; 240
 146:	89 83       	std	Y+1, r24	; 0x01
		LCD_Interface.Regs.PORT_E_clear();
 148:	e0 91 91 00 	lds	r30, 0x0091
 14c:	f0 91 92 00 	lds	r31, 0x0092
 150:	09 95       	icall
 152:	81 2f       	mov	r24, r17
 154:	8a 95       	dec	r24
 156:	f1 f7       	brne	.-4      	; 0x154 <LCD_WaitIfBusy+0x40>
		_delay_us(1);
		LCD_Interface.Regs.PORT_E_set();
 158:	e0 91 8b 00 	lds	r30, 0x008B
 15c:	f0 91 8c 00 	lds	r31, 0x008C
 160:	09 95       	icall
 162:	81 2f       	mov	r24, r17
 164:	8a 95       	dec	r24
 166:	f1 f7       	brne	.-4      	; 0x164 <LCD_WaitIfBusy+0x50>
		_delay_us(1);
		data |= (DATA_PIN & 0x0F);
 168:	99 81       	ldd	r25, Y+1	; 0x01
 16a:	83 b3       	in	r24, 0x13	; 19
 16c:	8f 70       	andi	r24, 0x0F	; 15
 16e:	89 2b       	or	r24, r25
 170:	89 83       	std	Y+1, r24	; 0x01
		LCD_Interface.Regs.PORT_E_clear();
 172:	e0 91 91 00 	lds	r30, 0x0091
 176:	f0 91 92 00 	lds	r31, 0x0092
 17a:	09 95       	icall
 17c:	81 2f       	mov	r24, r17
 17e:	8a 95       	dec	r24
 180:	f1 f7       	brne	.-4      	; 0x17e <LCD_WaitIfBusy+0x6a>
		_delay_us(1);

		if (data & 0x80) { } else { busy_f = 0; }
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	87 fd       	sbrc	r24, 7
 186:	d4 cf       	rjmp	.-88     	; 0x130 <LCD_WaitIfBusy+0x1c>
	}
	DATA_DIR |= (1<<LCD_DATA0) | (1<<LCD_DATA1) | (1<<LCD_DATA2) | (1<<LCD_DATA3);
 188:	84 b3       	in	r24, 0x14	; 20
 18a:	8f 60       	ori	r24, 0x0F	; 15
 18c:	84 bb       	out	0x14, r24	; 20
	LCD_Interface.Regs.PORT_RW_clear();
 18e:	e0 91 95 00 	lds	r30, 0x0095
 192:	f0 91 96 00 	lds	r31, 0x0096
 196:	09 95       	icall
}
 198:	0f 90       	pop	r0
 19a:	cf 91       	pop	r28
 19c:	df 91       	pop	r29
 19e:	1f 91       	pop	r17
 1a0:	08 95       	ret

000001a2 <LCD_SendCharacter>:

void LCD_SendCharacter(uint8_t character) {
 1a2:	1f 93       	push	r17
 1a4:	18 2f       	mov	r17, r24
 1a6:	80 ea       	ldi	r24, 0xA0	; 160
 1a8:	8a 95       	dec	r24
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCD_SendCharacter+0x6>

	_delay_us(30);
	//LCD_Interface.Comm.WaitIfBusy();
	LCD_Interface.Regs.PORT_RS_set();
 1ac:	e0 91 8d 00 	lds	r30, 0x008D
 1b0:	f0 91 8e 00 	lds	r31, 0x008E
 1b4:	09 95       	icall
	LCD_Interface.DataFlow.SendCommand(8, character);
 1b6:	e0 91 97 00 	lds	r30, 0x0097
 1ba:	f0 91 98 00 	lds	r31, 0x0098
 1be:	88 e0       	ldi	r24, 0x08	; 8
 1c0:	61 2f       	mov	r22, r17
 1c2:	09 95       	icall
	LCD_Interface.Regs.PORT_RS_clear();
 1c4:	e0 91 93 00 	lds	r30, 0x0093
 1c8:	f0 91 94 00 	lds	r31, 0x0094
 1cc:	09 95       	icall
}
 1ce:	1f 91       	pop	r17
 1d0:	08 95       	ret

000001d2 <LCD_SendString>:

void LCD_SendString(char* charString) {
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	ec 01       	movw	r28, r24
 1d8:	06 c0       	rjmp	.+12     	; 0x1e6 <LCD_SendString+0x14>

	while(*charString != '\0') {
		LCD_Interface.DataFlow.SendCharacter(*charString++);
 1da:	21 96       	adiw	r28, 0x01	; 1
 1dc:	e0 91 99 00 	lds	r30, 0x0099
 1e0:	f0 91 9a 00 	lds	r31, 0x009A
 1e4:	09 95       	icall
	LCD_Interface.Regs.PORT_RS_clear();
}

void LCD_SendString(char* charString) {

	while(*charString != '\0') {
 1e6:	88 81       	ld	r24, Y
 1e8:	88 23       	and	r24, r24
 1ea:	b9 f7       	brne	.-18     	; 0x1da <LCD_SendString+0x8>
		LCD_Interface.DataFlow.SendCharacter(*charString++);
	}
}
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <LCD_SendNumber>:

void LCD_SendNumber(uint16_t number) {

}
 1f2:	08 95       	ret

000001f4 <LCD_ProcessData>:

void LCD_ProcessData(int8_t data) {

	if (data & 0x01) {
 1f4:	99 27       	eor	r25, r25
 1f6:	87 fd       	sbrc	r24, 7
 1f8:	90 95       	com	r25
 1fa:	80 ff       	sbrs	r24, 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <LCD_ProcessData+0xe>
		DATA_PORT |=  (1<<LCD_DATA0);
 1fe:	a8 9a       	sbi	0x15, 0	; 21
 200:	01 c0       	rjmp	.+2      	; 0x204 <LCD_ProcessData+0x10>
	} else { DATA_PORT &= ~(1<<LCD_DATA0); }
 202:	a8 98       	cbi	0x15, 0	; 21

	if (data & 0x02) {
 204:	81 ff       	sbrs	r24, 1
 206:	02 c0       	rjmp	.+4      	; 0x20c <LCD_ProcessData+0x18>
		DATA_PORT |=  (1<<LCD_DATA1);
 208:	a9 9a       	sbi	0x15, 1	; 21
 20a:	01 c0       	rjmp	.+2      	; 0x20e <LCD_ProcessData+0x1a>
	} else { DATA_PORT &= ~(1<<LCD_DATA1); }
 20c:	a9 98       	cbi	0x15, 1	; 21

	if (data & 0x04) {
 20e:	82 ff       	sbrs	r24, 2
 210:	02 c0       	rjmp	.+4      	; 0x216 <LCD_ProcessData+0x22>
		DATA_PORT |=  (1<<LCD_DATA2);
 212:	aa 9a       	sbi	0x15, 2	; 21
 214:	01 c0       	rjmp	.+2      	; 0x218 <LCD_ProcessData+0x24>
	} else { DATA_PORT &= ~(1<<LCD_DATA2); }
 216:	aa 98       	cbi	0x15, 2	; 21

	if (data & 0x08) {
 218:	83 ff       	sbrs	r24, 3
 21a:	02 c0       	rjmp	.+4      	; 0x220 <LCD_ProcessData+0x2c>
		DATA_PORT |=  (1<<LCD_DATA3);
 21c:	ab 9a       	sbi	0x15, 3	; 21
 21e:	08 95       	ret
	} else { DATA_PORT &= ~(1<<LCD_DATA3); }
 220:	ab 98       	cbi	0x15, 3	; 21
 222:	08 95       	ret

00000224 <LCD_Initialize>:
}

void LCD_Initialize() {
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17

	DATA_DIR |= (1<<LCD_DATA0) | (1<<LCD_DATA1) | (1<<LCD_DATA2) | (1<<LCD_DATA3);
 228:	84 b3       	in	r24, 0x14	; 20
 22a:	8f 60       	ori	r24, 0x0F	; 15
 22c:	84 bb       	out	0x14, r24	; 20
	LCD_Interface.Regs.DDR_E_set();
 22e:	e0 91 7f 00 	lds	r30, 0x007F
 232:	f0 91 80 00 	lds	r31, 0x0080
 236:	09 95       	icall
	LCD_Interface.Regs.DDR_RS_set();
 238:	e0 91 81 00 	lds	r30, 0x0081
 23c:	f0 91 82 00 	lds	r31, 0x0082
 240:	09 95       	icall
	LCD_Interface.Regs.DDR_RW_set();
 242:	e0 91 83 00 	lds	r30, 0x0083
 246:	f0 91 84 00 	lds	r31, 0x0084
 24a:	09 95       	icall
	LCD_Interface.Regs.PORT_E_clear();
 24c:	e0 91 91 00 	lds	r30, 0x0091
 250:	f0 91 92 00 	lds	r31, 0x0092
 254:	09 95       	icall
	LCD_Interface.Regs.PORT_RS_clear();
 256:	e0 91 93 00 	lds	r30, 0x0093
 25a:	f0 91 94 00 	lds	r31, 0x0094
 25e:	09 95       	icall
	LCD_Interface.Regs.PORT_RW_clear();
 260:	e0 91 95 00 	lds	r30, 0x0095
 264:	f0 91 96 00 	lds	r31, 0x0096
 268:	09 95       	icall
 26a:	88 ec       	ldi	r24, 0xC8	; 200
 26c:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 26e:	20 e9       	ldi	r18, 0x90	; 144
 270:	31 e0       	ldi	r19, 0x01	; 1
 272:	f9 01       	movw	r30, r18
 274:	31 97       	sbiw	r30, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <LCD_Initialize+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 278:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 27a:	d9 f7       	brne	.-10     	; 0x272 <LCD_Initialize+0x4e>

	_delay_ms(20);
	LCD_Interface.DataFlow.SendCommand(4, 0x03);	_delay_ms(5);
 27c:	e0 91 97 00 	lds	r30, 0x0097
 280:	f0 91 98 00 	lds	r31, 0x0098
 284:	84 e0       	ldi	r24, 0x04	; 4
 286:	63 e0       	ldi	r22, 0x03	; 3
 288:	09 95       	icall
 28a:	80 e2       	ldi	r24, 0x20	; 32
 28c:	9e e4       	ldi	r25, 0x4E	; 78
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <LCD_Initialize+0x6a>
	LCD_Interface.DataFlow.SendCommand(4, 0x03);	_delay_ms(2);
 292:	e0 91 97 00 	lds	r30, 0x0097
 296:	f0 91 98 00 	lds	r31, 0x0098
 29a:	84 e0       	ldi	r24, 0x04	; 4
 29c:	63 e0       	ldi	r22, 0x03	; 3
 29e:	09 95       	icall
 2a0:	00 e4       	ldi	r16, 0x40	; 64
 2a2:	1f e1       	ldi	r17, 0x1F	; 31
 2a4:	c8 01       	movw	r24, r16
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <LCD_Initialize+0x82>
	LCD_Interface.DataFlow.SendCommand(4, 0x03);	_delay_ms(2);
 2aa:	e0 91 97 00 	lds	r30, 0x0097
 2ae:	f0 91 98 00 	lds	r31, 0x0098
 2b2:	84 e0       	ldi	r24, 0x04	; 4
 2b4:	63 e0       	ldi	r22, 0x03	; 3
 2b6:	09 95       	icall
 2b8:	c8 01       	movw	r24, r16
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <LCD_Initialize+0x96>
	LCD_Interface.DataFlow.SendCommand(4, 0x02);	_delay_ms(2);
 2be:	e0 91 97 00 	lds	r30, 0x0097
 2c2:	f0 91 98 00 	lds	r31, 0x0098
 2c6:	84 e0       	ldi	r24, 0x04	; 4
 2c8:	62 e0       	ldi	r22, 0x02	; 2
 2ca:	09 95       	icall
 2cc:	c8 01       	movw	r24, r16
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <LCD_Initialize+0xaa>
	// 4-bit mode, 2 lines
	LCD_Interface.DataFlow.SendCommand(4, 0x2); 	_delay_ms(2);
 2d2:	e0 91 97 00 	lds	r30, 0x0097
 2d6:	f0 91 98 00 	lds	r31, 0x0098
 2da:	84 e0       	ldi	r24, 0x04	; 4
 2dc:	62 e0       	ldi	r22, 0x02	; 2
 2de:	09 95       	icall
 2e0:	c8 01       	movw	r24, r16
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <LCD_Initialize+0xbe>
	LCD_Interface.DataFlow.SendCommand(4, 0x8); 	_delay_ms(2);
 2e6:	e0 91 97 00 	lds	r30, 0x0097
 2ea:	f0 91 98 00 	lds	r31, 0x0098
 2ee:	84 e0       	ldi	r24, 0x04	; 4
 2f0:	68 e0       	ldi	r22, 0x08	; 8
 2f2:	09 95       	icall
 2f4:	c8 01       	movw	r24, r16
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <LCD_Initialize+0xd2>

	// display on
	LCD_Interface.DataFlow.SendCommand(8, 0x0C);
 2fa:	e0 91 97 00 	lds	r30, 0x0097
 2fe:	f0 91 98 00 	lds	r31, 0x0098
 302:	88 e0       	ldi	r24, 0x08	; 8
 304:	6c e0       	ldi	r22, 0x0C	; 12
 306:	09 95       	icall
	//LCD_Interface.Comm.WaitIfBusy();

	// clear display, return position
	LCD_Interface.DataFlow.SendCommand(8, 0x01);
 308:	e0 91 97 00 	lds	r30, 0x0097
 30c:	f0 91 98 00 	lds	r31, 0x0098
 310:	88 e0       	ldi	r24, 0x08	; 8
 312:	61 e0       	ldi	r22, 0x01	; 1
 314:	09 95       	icall
	//LCD_Interface.Comm.WaitIfBusy();
	LCD_Interface.DataFlow.SendString("Initialization");_delay_ms(500);
 316:	e0 91 9b 00 	lds	r30, 0x009B
 31a:	f0 91 9c 00 	lds	r31, 0x009C
 31e:	82 e6       	ldi	r24, 0x62	; 98
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	09 95       	icall
 324:	88 e8       	ldi	r24, 0x88	; 136
 326:	93 e1       	ldi	r25, 0x13	; 19
 328:	20 e9       	ldi	r18, 0x90	; 144
 32a:	31 e0       	ldi	r19, 0x01	; 1
 32c:	f9 01       	movw	r30, r18
 32e:	31 97       	sbiw	r30, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <LCD_Initialize+0x10a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 332:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 334:	d9 f7       	brne	.-10     	; 0x32c <LCD_Initialize+0x108>
	//LCD_Interface.Comm.WaitIfBusy();
	LCD_Interface.Position(2, 1);
 336:	e0 91 7d 00 	lds	r30, 0x007D
 33a:	f0 91 7e 00 	lds	r31, 0x007E
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	61 e0       	ldi	r22, 0x01	; 1
 342:	09 95       	icall
	//LCD_Interface.Comm.WaitIfBusy();
	LCD_Interface.DataFlow.SendString("COMPLETED");	_delay_ms(1000);
 344:	e0 91 9b 00 	lds	r30, 0x009B
 348:	f0 91 9c 00 	lds	r31, 0x009C
 34c:	81 e7       	ldi	r24, 0x71	; 113
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	09 95       	icall
 352:	80 e1       	ldi	r24, 0x10	; 16
 354:	97 e2       	ldi	r25, 0x27	; 39
 356:	20 e9       	ldi	r18, 0x90	; 144
 358:	31 e0       	ldi	r19, 0x01	; 1
 35a:	f9 01       	movw	r30, r18
 35c:	31 97       	sbiw	r30, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <LCD_Initialize+0x138>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 360:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 362:	d9 f7       	brne	.-10     	; 0x35a <LCD_Initialize+0x136>
	LCD_Interface.DataFlow.SendCommand(8, 0x01);
 364:	e0 91 97 00 	lds	r30, 0x0097
 368:	f0 91 98 00 	lds	r31, 0x0098
 36c:	88 e0       	ldi	r24, 0x08	; 8
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	09 95       	icall
	LCD_Interface.Position(1, 1);
 372:	e0 91 7d 00 	lds	r30, 0x007D
 376:	f0 91 7e 00 	lds	r31, 0x007E
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	09 95       	icall
}
 380:	1f 91       	pop	r17
 382:	0f 91       	pop	r16
 384:	08 95       	ret

00000386 <LCD_Position>:

void LCD_Position(uint8_t pos_y, uint8_t pos_x) {
 386:	df 93       	push	r29
 388:	cf 93       	push	r28
 38a:	00 d0       	rcall	.+0      	; 0x38c <LCD_Position+0x6>
 38c:	00 d0       	rcall	.+0      	; 0x38e <LCD_Position+0x8>
 38e:	cd b7       	in	r28, 0x3d	; 61
 390:	de b7       	in	r29, 0x3e	; 62
 392:	26 2f       	mov	r18, r22

	uint8_t pos;
	uint8_t LCD_Rows[4] = {0, 64, LCD_ROW_LENGTH, LCD_ROW_LENGTH+64};
 394:	19 82       	std	Y+1, r1	; 0x01
 396:	90 e4       	ldi	r25, 0x40	; 64
 398:	9a 83       	std	Y+2, r25	; 0x02
 39a:	90 e1       	ldi	r25, 0x10	; 16
 39c:	9b 83       	std	Y+3, r25	; 0x03
 39e:	90 e5       	ldi	r25, 0x50	; 80
 3a0:	9c 83       	std	Y+4, r25	; 0x04

	pos = LCD_SIZE + LCD_Rows[pos_y - 1] + (pos_x - 1);
	LCD_Interface.DataFlow.SendCommand(8, pos);
 3a2:	21 58       	subi	r18, 0x81	; 129
 3a4:	fe 01       	movw	r30, r28
 3a6:	e8 0f       	add	r30, r24
 3a8:	f1 1d       	adc	r31, r1
 3aa:	60 81       	ld	r22, Z
 3ac:	62 0f       	add	r22, r18
 3ae:	e0 91 97 00 	lds	r30, 0x0097
 3b2:	f0 91 98 00 	lds	r31, 0x0098
 3b6:	88 e0       	ldi	r24, 0x08	; 8
 3b8:	09 95       	icall
}
 3ba:	0f 90       	pop	r0
 3bc:	0f 90       	pop	r0
 3be:	0f 90       	pop	r0
 3c0:	0f 90       	pop	r0
 3c2:	cf 91       	pop	r28
 3c4:	df 91       	pop	r29
 3c6:	08 95       	ret

000003c8 <LCD_DDR_E_set>:

void LCD_DDR_E_set() 		{ CMD_DIR |= (1<<LCD_E); }
 3c8:	b8 9a       	sbi	0x17, 0	; 23
 3ca:	08 95       	ret

000003cc <LCD_DDR_RS_set>:
void LCD_DDR_RS_set() 		{ CMD_DIR |= (1<<LCD_RS); }
 3cc:	b9 9a       	sbi	0x17, 1	; 23
 3ce:	08 95       	ret

000003d0 <LCD_DDR_RW_set>:
void LCD_DDR_RW_set() 		{ CMD_DIR |= (1<<LCD_RW); }
 3d0:	ba 9a       	sbi	0x17, 2	; 23
 3d2:	08 95       	ret

000003d4 <LCD_DDR_E_clear>:
void LCD_DDR_E_clear() 		{ CMD_DIR &= ~(1<<LCD_E); }
 3d4:	b8 98       	cbi	0x17, 0	; 23
 3d6:	08 95       	ret

000003d8 <LCD_DDR_RS_clear>:
void LCD_DDR_RS_clear() 	{ CMD_DIR &= ~(1<<LCD_RS); }
 3d8:	b9 98       	cbi	0x17, 1	; 23
 3da:	08 95       	ret

000003dc <LCD_DDR_RW_clear>:
void LCD_DDR_RW_clear()		{ CMD_DIR &= ~(1<<LCD_RW); }
 3dc:	ba 98       	cbi	0x17, 2	; 23
 3de:	08 95       	ret

000003e0 <LCD_PORT_E_set>:
void LCD_PORT_E_set() 		{ CMD_PORT |= (1<<LCD_E); }
 3e0:	c0 9a       	sbi	0x18, 0	; 24
 3e2:	08 95       	ret

000003e4 <LCD_PORT_RS_set>:
void LCD_PORT_RS_set() 		{ CMD_PORT |= (1<<LCD_RS); }
 3e4:	c1 9a       	sbi	0x18, 1	; 24
 3e6:	08 95       	ret

000003e8 <LCD_PORT_RW_set>:
void LCD_PORT_RW_set()		{ CMD_PORT |= (1<<LCD_RW); }
 3e8:	c2 9a       	sbi	0x18, 2	; 24
 3ea:	08 95       	ret

000003ec <LCD_PORT_E_clear>:
void LCD_PORT_E_clear() 	{ CMD_PORT &= ~(1<<LCD_E); }
 3ec:	c0 98       	cbi	0x18, 0	; 24
 3ee:	08 95       	ret

000003f0 <LCD_PORT_RS_clear>:
void LCD_PORT_RS_clear() 	{ CMD_PORT &= ~(1<<LCD_RS); }
 3f0:	c1 98       	cbi	0x18, 1	; 24
 3f2:	08 95       	ret

000003f4 <LCD_PORT_RW_clear>:
void LCD_PORT_RW_clear() 	{ CMD_PORT &= ~(1<<LCD_RW); }
 3f4:	c2 98       	cbi	0x18, 2	; 24
 3f6:	08 95       	ret

000003f8 <LCD_Menu_Initialize>:
#include <avr/io.h>
#include <util/delay.h>

LCD_Menu_t LCD_Menu = {LCD_Menu_Initialize};

void LCD_Menu_Initialize() {
 3f8:	af 92       	push	r10
 3fa:	bf 92       	push	r11
 3fc:	cf 92       	push	r12
 3fe:	df 92       	push	r13
 400:	ef 92       	push	r14
 402:	ff 92       	push	r15
 404:	0f 93       	push	r16
 406:	1f 93       	push	r17

	//uint8_t index_Level;
	//uint8_t index_Queue;

	// LED Object
	LCD_Menu.Options.LED.CurrentFunction[0] 		= LCD_Menu_Preset_colors;
 408:	43 ed       	ldi	r20, 0xD3	; 211
 40a:	52 e0       	ldi	r21, 0x02	; 2
 40c:	50 93 49 01 	sts	0x0149, r21
 410:	40 93 48 01 	sts	0x0148, r20
	LCD_Menu.Options.LED.CurrentFunction[1] 		= LCD_Menu_Custom_color;
 414:	24 ed       	ldi	r18, 0xD4	; 212
 416:	32 e0       	ldi	r19, 0x02	; 2
 418:	30 93 4b 01 	sts	0x014B, r19
 41c:	20 93 4a 01 	sts	0x014A, r18
	LCD_Menu.Options.LED.Preset_colors 				= LCD_Menu_Preset_colors;
 420:	50 93 4d 01 	sts	0x014D, r21
 424:	40 93 4c 01 	sts	0x014C, r20
	LCD_Menu.Options.LED.Custom_color 				= LCD_Menu_Custom_color;
 428:	30 93 4f 01 	sts	0x014F, r19
 42c:	20 93 4e 01 	sts	0x014E, r18
	LCD_Menu.Options.LED.CurrentSubFunctionName[0] 	= "Preset colors";
 430:	65 ea       	ldi	r22, 0xA5	; 165
 432:	c6 2e       	mov	r12, r22
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	d6 2e       	mov	r13, r22
 438:	d0 92 51 01 	sts	0x0151, r13
 43c:	c0 92 50 01 	sts	0x0150, r12
	LCD_Menu.Options.LED.CurrentSubFunctionName[1] 	= "Custom color";
 440:	03 eb       	ldi	r16, 0xB3	; 179
 442:	10 e0       	ldi	r17, 0x00	; 0
 444:	10 93 53 01 	sts	0x0153, r17
 448:	00 93 52 01 	sts	0x0152, r16
	LCD_Menu.Options.LED.name = "LED";
 44c:	e0 ec       	ldi	r30, 0xC0	; 192
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	f0 93 55 01 	sts	0x0155, r31
 454:	e0 93 54 01 	sts	0x0154, r30

	// Settings Object
	LCD_Menu.Options.Prefs.name = "Preferences";
 458:	a4 ec       	ldi	r26, 0xC4	; 196
 45a:	b0 e0       	ldi	r27, 0x00	; 0
 45c:	b0 93 5f 01 	sts	0x015F, r27
 460:	a0 93 5e 01 	sts	0x015E, r26

	// Profiles Object
	LCD_Menu.Options.Profs.name = "Profiles";
 464:	90 ed       	ldi	r25, 0xD0	; 208
 466:	a9 2e       	mov	r10, r25
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	b9 2e       	mov	r11, r25
 46c:	b0 92 6b 01 	sts	0x016B, r11
 470:	a0 92 6a 01 	sts	0x016A, r10

	// Channels Object
	LCD_Menu.Options.Ch.name = "Channels";
 474:	89 ed       	ldi	r24, 0xD9	; 217
 476:	e8 2e       	mov	r14, r24
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	f8 2e       	mov	r15, r24
 47c:	f0 92 65 01 	sts	0x0165, r15
 480:	e0 92 64 01 	sts	0x0164, r14

	// Menu Object
	LCD_Menu.Initialize 		= LCD_Menu_Initialize;
 484:	8c ef       	ldi	r24, 0xFC	; 252
 486:	91 e0       	ldi	r25, 0x01	; 1
 488:	90 93 f8 00 	sts	0x00F8, r25
 48c:	80 93 f7 00 	sts	0x00F7, r24
	LCD_Menu.Enter 				= LCD_Menu_Enter;
 490:	8d e6       	ldi	r24, 0x6D	; 109
 492:	93 e0       	ldi	r25, 0x03	; 3
 494:	90 93 fa 00 	sts	0x00FA, r25
 498:	80 93 f9 00 	sts	0x00F9, r24
	LCD_Menu.optionSelected 	= OPT_VOID;
 49c:	80 e5       	ldi	r24, 0x50	; 80
 49e:	80 93 fb 00 	sts	0x00FB, r24
	LCD_Menu.subfQueue 			= 0;
 4a2:	10 92 fd 00 	sts	0x00FD, r1
	LCD_Menu.fQueue 			= 0;
 4a6:	10 92 fc 00 	sts	0x00FC, r1
	LCD_Menu.bottomThreshold 	= 0;
 4aa:	10 92 fe 00 	sts	0x00FE, r1
	LCD_Menu.topThreshold		= 3;
 4ae:	83 e0       	ldi	r24, 0x03	; 3
 4b0:	80 93 ff 00 	sts	0x00FF, r24

	// Options Object
	LCD_Menu.Options.LED_color 		= LCD_Menu_LED_color;
 4b4:	6d ec       	ldi	r22, 0xCD	; 205
 4b6:	72 e0       	ldi	r23, 0x02	; 2
 4b8:	70 93 01 01 	sts	0x0101, r23
 4bc:	60 93 00 01 	sts	0x0100, r22
	LCD_Menu.Options.Preferences 	= LCD_Menu_Preferences;
 4c0:	85 ed       	ldi	r24, 0xD5	; 213
 4c2:	92 e0       	ldi	r25, 0x02	; 2
 4c4:	90 93 03 01 	sts	0x0103, r25
 4c8:	80 93 02 01 	sts	0x0102, r24
	LCD_Menu.Options.Channels 		= LCD_Menu_Channels;
 4cc:	86 ed       	ldi	r24, 0xD6	; 214
 4ce:	92 e0       	ldi	r25, 0x02	; 2
 4d0:	90 93 05 01 	sts	0x0105, r25
 4d4:	80 93 04 01 	sts	0x0104, r24
	LCD_Menu.Options.Profiles 		= LCD_Menu_Profiles;
 4d8:	87 ed       	ldi	r24, 0xD7	; 215
 4da:	92 e0       	ldi	r25, 0x02	; 2
 4dc:	90 93 07 01 	sts	0x0107, r25
 4e0:	80 93 06 01 	sts	0x0106, r24

	LCD_Menu.Options.CurrentFunctionName[0][0] = LCD_Menu.Options.LED.name;
 4e4:	f0 93 29 01 	sts	0x0129, r31
 4e8:	e0 93 28 01 	sts	0x0128, r30
	LCD_Menu.Options.CurrentFunctionName[0][1] = LCD_Menu.Options.LED.CurrentSubFunctionName[0];
 4ec:	d0 92 2b 01 	sts	0x012B, r13
 4f0:	c0 92 2a 01 	sts	0x012A, r12
	LCD_Menu.Options.CurrentFunctionName[0][2] = LCD_Menu.Options.LED.CurrentSubFunctionName[1];
 4f4:	10 93 2d 01 	sts	0x012D, r17
 4f8:	00 93 2c 01 	sts	0x012C, r16
	LCD_Menu.Options.CurrentFunctionName[0][3] = "";
 4fc:	82 ee       	ldi	r24, 0xE2	; 226
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	90 93 2f 01 	sts	0x012F, r25
 504:	80 93 2e 01 	sts	0x012E, r24
	LCD_Menu.Options.CurrentFunctionName[1][0] = LCD_Menu.Options.Prefs.name;
 508:	b0 93 31 01 	sts	0x0131, r27
 50c:	a0 93 30 01 	sts	0x0130, r26
	LCD_Menu.Options.CurrentFunctionName[1][1] = "";
 510:	90 93 33 01 	sts	0x0133, r25
 514:	80 93 32 01 	sts	0x0132, r24
	LCD_Menu.Options.CurrentFunctionName[1][2] = "";
 518:	e7 ef       	ldi	r30, 0xF7	; 247
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	96 af       	std	Z+62, r25	; 0x3e
 51e:	85 af       	std	Z+61, r24	; 0x3d
	LCD_Menu.Options.CurrentFunctionName[1][3] = "";
 520:	90 93 37 01 	sts	0x0137, r25
 524:	80 93 36 01 	sts	0x0136, r24
	LCD_Menu.Options.CurrentFunctionName[2][0] = LCD_Menu.Options.Ch.name;
 528:	f0 92 39 01 	sts	0x0139, r15
 52c:	e0 92 38 01 	sts	0x0138, r14
	LCD_Menu.Options.CurrentFunctionName[2][1] = "";
 530:	90 93 3b 01 	sts	0x013B, r25
 534:	80 93 3a 01 	sts	0x013A, r24
	LCD_Menu.Options.CurrentFunctionName[2][2] = "";
 538:	90 93 3d 01 	sts	0x013D, r25
 53c:	80 93 3c 01 	sts	0x013C, r24
	LCD_Menu.Options.CurrentFunctionName[2][3] = "";
 540:	90 93 3f 01 	sts	0x013F, r25
 544:	80 93 3e 01 	sts	0x013E, r24
	LCD_Menu.Options.CurrentFunctionName[3][0] = LCD_Menu.Options.Profs.name;
 548:	b0 92 41 01 	sts	0x0141, r11
 54c:	a0 92 40 01 	sts	0x0140, r10
	LCD_Menu.Options.CurrentFunctionName[3][1] = "";
 550:	90 93 43 01 	sts	0x0143, r25
 554:	80 93 42 01 	sts	0x0142, r24
	LCD_Menu.Options.CurrentFunctionName[3][2] = "";
 558:	90 93 45 01 	sts	0x0145, r25
 55c:	80 93 44 01 	sts	0x0144, r24
	LCD_Menu.Options.CurrentFunctionName[3][3] = "";
 560:	90 93 47 01 	sts	0x0147, r25
 564:	80 93 46 01 	sts	0x0146, r24

	LCD_Menu.Options.CurrentFunction[0][0] = LCD_Menu.Options.LED_color;
 568:	70 93 09 01 	sts	0x0109, r23
 56c:	60 93 08 01 	sts	0x0108, r22
	LCD_Menu.Options.CurrentFunction[0][1] = LCD_Menu.Options.LED.Preset_colors;
 570:	50 93 0b 01 	sts	0x010B, r21
 574:	40 93 0a 01 	sts	0x010A, r20
	LCD_Menu.Options.CurrentFunction[0][2] = LCD_Menu.Options.LED.Custom_color;
 578:	30 93 0d 01 	sts	0x010D, r19
 57c:	20 93 0c 01 	sts	0x010C, r18
	LCD_Menu.Options.CurrentFunction[0][3] = 0;
 580:	10 92 0f 01 	sts	0x010F, r1
 584:	10 92 0e 01 	sts	0x010E, r1
				LCD_Menu.Options.CurrentFunctionName[index_Level][index_Queue];
			}
	}*/


}
 588:	1f 91       	pop	r17
 58a:	0f 91       	pop	r16
 58c:	ff 90       	pop	r15
 58e:	ef 90       	pop	r14
 590:	df 90       	pop	r13
 592:	cf 90       	pop	r12
 594:	bf 90       	pop	r11
 596:	af 90       	pop	r10
 598:	08 95       	ret

0000059a <LCD_Menu_LED_color>:

}

void LCD_Menu_LED_color() {

	LCD_Menu.bottomThreshold 	= 0;
 59a:	10 92 fe 00 	sts	0x00FE, r1
	LCD_Menu.topThreshold		= 2;
 59e:	82 e0       	ldi	r24, 0x02	; 2
 5a0:	80 93 ff 00 	sts	0x00FF, r24
}
 5a4:	08 95       	ret

000005a6 <LCD_Menu_Preset_colors>:

void LCD_Menu_Preset_colors() {

}
 5a6:	08 95       	ret

000005a8 <LCD_Menu_Custom_color>:

void LCD_Menu_Custom_color() {

}
 5a8:	08 95       	ret

000005aa <LCD_Menu_Preferences>:

void LCD_Menu_Preferences() {

}
 5aa:	08 95       	ret

000005ac <LCD_Menu_Channels>:

void LCD_Menu_Channels() {

}
 5ac:	08 95       	ret

000005ae <LCD_Menu_Profiles>:

void LCD_Menu_Profiles() {

}
 5ae:	08 95       	ret

000005b0 <LCD_Menu_Option_Selection>:
/*
 * fLevel (main commands) - 0-3 [x][]
 * fQueue (sub commands)  - 1-3 [][x]
 */
void LCD_Menu_Option_Selection() {
 5b0:	1f 93       	push	r17

	char* functionName;
	uint8_t fLevelPrev;

		if ( (LCD_Menu.subfQueue - 1) < OPT_LEVEL_GROUND )
 5b2:	10 91 fd 00 	lds	r17, 0x00FD
 5b6:	11 23       	and	r17, r17
 5b8:	e9 f0       	breq	.+58     	; 0x5f4 <LCD_Menu_Option_Selection+0x44>
			fLevelPrev = OPT_LEVEL_SURFACE;
		else
			fLevelPrev = LCD_Menu.subfQueue - 1;

		if (LCD_Menu.subfQueue != OPT_LEVEL_GROUND) {
			LCD_Interface.Position(1, 1);
 5ba:	e0 91 7d 00 	lds	r30, 0x007D
 5be:	f0 91 7e 00 	lds	r31, 0x007E
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	61 e0       	ldi	r22, 0x01	; 1
 5c6:	09 95       	icall
			functionName = LCD_Menu.Options.CurrentFunctionName[LCD_Menu.fQueue][fLevelPrev];
			LCD_Interface.DataFlow.SendString(functionName);
 5c8:	11 50       	subi	r17, 0x01	; 1
 5ca:	e0 91 fc 00 	lds	r30, 0x00FC
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	ee 0f       	add	r30, r30
 5d2:	ff 1f       	adc	r31, r31
 5d4:	ee 0f       	add	r30, r30
 5d6:	ff 1f       	adc	r31, r31
 5d8:	e1 0f       	add	r30, r17
 5da:	f1 1d       	adc	r31, r1
 5dc:	ee 0f       	add	r30, r30
 5de:	ff 1f       	adc	r31, r31
 5e0:	e1 5e       	subi	r30, 0xE1	; 225
 5e2:	fe 4f       	sbci	r31, 0xFE	; 254
 5e4:	20 91 9b 00 	lds	r18, 0x009B
 5e8:	30 91 9c 00 	lds	r19, 0x009C
 5ec:	81 85       	ldd	r24, Z+9	; 0x09
 5ee:	92 85       	ldd	r25, Z+10	; 0x0a
 5f0:	f9 01       	movw	r30, r18
 5f2:	09 95       	icall
		}

			switch(LCD_Menu.optionSelected)
 5f4:	80 91 fb 00 	lds	r24, 0x00FB
 5f8:	80 33       	cpi	r24, 0x30	; 48
 5fa:	21 f0       	breq	.+8      	; 0x604 <LCD_Menu_Option_Selection+0x54>
 5fc:	80 34       	cpi	r24, 0x40	; 64
 5fe:	09 f0       	breq	.+2      	; 0x602 <LCD_Menu_Option_Selection+0x52>
 600:	67 c0       	rjmp	.+206    	; 0x6d0 <LCD_Menu_Option_Selection+0x120>
 602:	13 c0       	rjmp	.+38     	; 0x62a <LCD_Menu_Option_Selection+0x7a>
			{
				case OPT_NEXT:
					if ((LCD_Menu.fQueue >= LCD_Menu.bottomThreshold) && (LCD_Menu.fQueue < LCD_Menu.topThreshold)) {
 604:	90 91 fc 00 	lds	r25, 0x00FC
 608:	20 91 fe 00 	lds	r18, 0x00FE
 60c:	92 17       	cp	r25, r18
 60e:	30 f0       	brcs	.+12     	; 0x61c <LCD_Menu_Option_Selection+0x6c>
 610:	80 91 ff 00 	lds	r24, 0x00FF
 614:	98 17       	cp	r25, r24
 616:	10 f4       	brcc	.+4      	; 0x61c <LCD_Menu_Option_Selection+0x6c>
						LCD_Menu.fQueue++;
 618:	9f 5f       	subi	r25, 0xFF	; 255
 61a:	12 c0       	rjmp	.+36     	; 0x640 <LCD_Menu_Option_Selection+0x90>
					} else if (LCD_Menu.fQueue == LCD_Menu.topThreshold) {
 61c:	80 91 ff 00 	lds	r24, 0x00FF
 620:	98 17       	cp	r25, r24
 622:	b9 f4       	brne	.+46     	; 0x652 <LCD_Menu_Option_Selection+0xa2>
						LCD_Menu.fQueue = LCD_Menu.bottomThreshold;
 624:	20 93 fc 00 	sts	0x00FC, r18
 628:	14 c0       	rjmp	.+40     	; 0x652 <LCD_Menu_Option_Selection+0xa2>
					functionName = LCD_Menu.Options.CurrentFunctionName[LCD_Menu.fQueue][LCD_Menu.subfQueue];
					LCD_Interface.DataFlow.SendString(functionName);
					break;

				case OPT_PREV:
					if ((LCD_Menu.fQueue > LCD_Menu.bottomThreshold) && (LCD_Menu.fQueue <= LCD_Menu.topThreshold)) {
 62a:	90 91 fc 00 	lds	r25, 0x00FC
 62e:	20 91 fe 00 	lds	r18, 0x00FE
 632:	29 17       	cp	r18, r25
 634:	40 f4       	brcc	.+16     	; 0x646 <LCD_Menu_Option_Selection+0x96>
 636:	80 91 ff 00 	lds	r24, 0x00FF
 63a:	89 17       	cp	r24, r25
 63c:	20 f0       	brcs	.+8      	; 0x646 <LCD_Menu_Option_Selection+0x96>
						LCD_Menu.fQueue--;
 63e:	91 50       	subi	r25, 0x01	; 1
 640:	90 93 fc 00 	sts	0x00FC, r25
 644:	06 c0       	rjmp	.+12     	; 0x652 <LCD_Menu_Option_Selection+0xa2>
					} else if (LCD_Menu.fQueue == LCD_Menu.bottomThreshold) {
 646:	92 17       	cp	r25, r18
 648:	21 f4       	brne	.+8      	; 0x652 <LCD_Menu_Option_Selection+0xa2>
						LCD_Menu.fQueue = LCD_Menu.topThreshold;
 64a:	80 91 ff 00 	lds	r24, 0x00FF
 64e:	80 93 fc 00 	sts	0x00FC, r24
					}

					LCD_Interface.Position(2, 1);
 652:	e0 91 7d 00 	lds	r30, 0x007D
 656:	f0 91 7e 00 	lds	r31, 0x007E
 65a:	82 e0       	ldi	r24, 0x02	; 2
 65c:	61 e0       	ldi	r22, 0x01	; 1
 65e:	09 95       	icall
					LCD_Interface.DataFlow.SendCharacter(S_ARROW_RIGHT);
 660:	e0 91 99 00 	lds	r30, 0x0099
 664:	f0 91 9a 00 	lds	r31, 0x009A
 668:	8e e7       	ldi	r24, 0x7E	; 126
 66a:	09 95       	icall
					LCD_Interface.DataFlow.SendCharacter(S_BLANK);
 66c:	e0 91 99 00 	lds	r30, 0x0099
 670:	f0 91 9a 00 	lds	r31, 0x009A
 674:	80 e2       	ldi	r24, 0x20	; 32
 676:	09 95       	icall
					LCD_Interface.Position(2, 3);
 678:	e0 91 7d 00 	lds	r30, 0x007D
 67c:	f0 91 7e 00 	lds	r31, 0x007E
 680:	82 e0       	ldi	r24, 0x02	; 2
 682:	63 e0       	ldi	r22, 0x03	; 3
 684:	09 95       	icall
					LCD_Interface.DataFlow.SendString("              ");
 686:	e0 91 9b 00 	lds	r30, 0x009B
 68a:	f0 91 9c 00 	lds	r31, 0x009C
 68e:	83 ee       	ldi	r24, 0xE3	; 227
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	09 95       	icall
					LCD_Interface.Position(2, 3);
 694:	e0 91 7d 00 	lds	r30, 0x007D
 698:	f0 91 7e 00 	lds	r31, 0x007E
 69c:	82 e0       	ldi	r24, 0x02	; 2
 69e:	63 e0       	ldi	r22, 0x03	; 3
 6a0:	09 95       	icall

					functionName = LCD_Menu.Options.CurrentFunctionName[LCD_Menu.fQueue][LCD_Menu.subfQueue];
					LCD_Interface.DataFlow.SendString(functionName);
 6a2:	80 91 fd 00 	lds	r24, 0x00FD
 6a6:	e0 91 fc 00 	lds	r30, 0x00FC
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	ee 0f       	add	r30, r30
 6ae:	ff 1f       	adc	r31, r31
 6b0:	ee 0f       	add	r30, r30
 6b2:	ff 1f       	adc	r31, r31
 6b4:	e8 0f       	add	r30, r24
 6b6:	f1 1d       	adc	r31, r1
 6b8:	ee 0f       	add	r30, r30
 6ba:	ff 1f       	adc	r31, r31
 6bc:	e1 5e       	subi	r30, 0xE1	; 225
 6be:	fe 4f       	sbci	r31, 0xFE	; 254
 6c0:	20 91 9b 00 	lds	r18, 0x009B
 6c4:	30 91 9c 00 	lds	r19, 0x009C
 6c8:	81 85       	ldd	r24, Z+9	; 0x09
 6ca:	92 85       	ldd	r25, Z+10	; 0x0a
 6cc:	f9 01       	movw	r30, r18
 6ce:	09 95       	icall

				default:
					break;
			}

	LCD_Menu.optionSelected = OPT_VOID;
 6d0:	80 e5       	ldi	r24, 0x50	; 80
 6d2:	80 93 fb 00 	sts	0x00FB, r24

}
 6d6:	1f 91       	pop	r17
 6d8:	08 95       	ret

000006da <LCD_Menu_Enter>:
}

void LCD_Menu_Enter() {

	char* functionName;
	DDRC |= 1<<PC5;
 6da:	a5 9a       	sbi	0x14, 5	; 20
	LCD_Interface.DataFlow.SendCommand(8, 0x01);
 6dc:	e0 91 97 00 	lds	r30, 0x0097
 6e0:	f0 91 98 00 	lds	r31, 0x0098
 6e4:	88 e0       	ldi	r24, 0x08	; 8
 6e6:	61 e0       	ldi	r22, 0x01	; 1
 6e8:	09 95       	icall
	LCD_Interface.Position(1, 1);
 6ea:	e0 91 7d 00 	lds	r30, 0x007D
 6ee:	f0 91 7e 00 	lds	r31, 0x007E
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	61 e0       	ldi	r22, 0x01	; 1
 6f6:	09 95       	icall
	LCD_Interface.DataFlow.SendString("Menu");
 6f8:	e0 91 9b 00 	lds	r30, 0x009B
 6fc:	f0 91 9c 00 	lds	r31, 0x009C
 700:	82 ef       	ldi	r24, 0xF2	; 242
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	09 95       	icall
	LCD_Interface.Position(2, 1);
 706:	e0 91 7d 00 	lds	r30, 0x007D
 70a:	f0 91 7e 00 	lds	r31, 0x007E
 70e:	82 e0       	ldi	r24, 0x02	; 2
 710:	61 e0       	ldi	r22, 0x01	; 1
 712:	09 95       	icall
	LCD_Interface.DataFlow.SendCharacter(S_ARROW_RIGHT);
 714:	e0 91 99 00 	lds	r30, 0x0099
 718:	f0 91 9a 00 	lds	r31, 0x009A
 71c:	8e e7       	ldi	r24, 0x7E	; 126
 71e:	09 95       	icall
	LCD_Interface.DataFlow.SendCharacter(S_BLANK);
 720:	e0 91 99 00 	lds	r30, 0x0099
 724:	f0 91 9a 00 	lds	r31, 0x009A
 728:	80 e2       	ldi	r24, 0x20	; 32
 72a:	09 95       	icall
	LCD_Interface.Position(2, 3);
 72c:	e0 91 7d 00 	lds	r30, 0x007D
 730:	f0 91 7e 00 	lds	r31, 0x007E
 734:	82 e0       	ldi	r24, 0x02	; 2
 736:	63 e0       	ldi	r22, 0x03	; 3
 738:	09 95       	icall
	functionName = LCD_Menu.Options.CurrentFunctionName[0][0];
	LCD_Interface.DataFlow.SendString(functionName);
 73a:	e0 91 9b 00 	lds	r30, 0x009B
 73e:	f0 91 9c 00 	lds	r31, 0x009C
 742:	80 91 28 01 	lds	r24, 0x0128
 746:	90 91 29 01 	lds	r25, 0x0129
 74a:	09 95       	icall

	while(1) {

		LCD_Menu_Option_Selection();
 74c:	31 df       	rcall	.-414    	; 0x5b0 <LCD_Menu_Option_Selection>

			while(1) {
				__asm__ __volatile__ ("nop" ::);
				if (LCD_Menu.optionSelected != OPT_VOID) { break;}
 74e:	80 91 fb 00 	lds	r24, 0x00FB
	while(1) {

		LCD_Menu_Option_Selection();

			while(1) {
				__asm__ __volatile__ ("nop" ::);
 752:	00 00       	nop
				if (LCD_Menu.optionSelected != OPT_VOID) { break;}
 754:	80 35       	cpi	r24, 0x50	; 80
 756:	e9 f3       	breq	.-6      	; 0x752 <LCD_Menu_Enter+0x78>
 758:	f9 cf       	rjmp	.-14     	; 0x74c <LCD_Menu_Enter+0x72>

0000075a <getfLevelDepth>:

	LCD_Menu.optionSelected = OPT_VOID;

}

uint8_t getfLevelDepth() { return OPT_LEVEL_SURFACE; }
 75a:	82 e0       	ldi	r24, 0x02	; 2
 75c:	08 95       	ret

0000075e <getfQuaueDepth>:
uint8_t getfQuaueDepth(uint8_t func) { return 3; }
 75e:	83 e0       	ldi	r24, 0x03	; 3
 760:	08 95       	ret

00000762 <main>:

#define F_CPU 16000000UL

int main() {

	LCD_Interface.Initialize();
 762:	e0 91 7b 00 	lds	r30, 0x007B
 766:	f0 91 7c 00 	lds	r31, 0x007C
 76a:	09 95       	icall
	BUTTONS_Interface.Initialize();
 76c:	e0 91 60 00 	lds	r30, 0x0060
 770:	f0 91 61 00 	lds	r31, 0x0061
 774:	09 95       	icall
	LCD_Menu.Initialize();
 776:	e0 91 f7 00 	lds	r30, 0x00F7
 77a:	f0 91 f8 00 	lds	r31, 0x00F8
 77e:	09 95       	icall
	LCD_Menu.Enter();
 780:	e0 91 f9 00 	lds	r30, 0x00F9
 784:	f0 91 fa 00 	lds	r31, 0x00FA
 788:	09 95       	icall
 78a:	ff cf       	rjmp	.-2      	; 0x78a <main+0x28>

0000078c <_exit>:
 78c:	f8 94       	cli

0000078e <__stop_program>:
 78e:	ff cf       	rjmp	.-2      	; 0x78e <__stop_program>
